
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Mar 05 01:48:23 VET 2008
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Wed Mar 05 01:48:23 VET 2008
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\003\005\000\002\002\004\000\002\004" +
    "\005\000\002\004\004\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\007\006\000\002\007\006\000\002\007" +
    "\006\000\002\010\005\000\002\011\010\000\002\012\012" +
    "\000\002\013\010\000\002\014\005\000\002\014\003\000" +
    "\002\022\003\000\002\022\003\000\002\015\005\000\002" +
    "\015\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\016\005\000\002\016\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\017\005\000\002\017\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\021\005\000\002\021\003\000\002\021\004" +
    "\000\002\021\003\000\002\021\006\000\002\021\006\000" +
    "\002\021\006\000\002\021\004\000\002\021\003\000\002" +
    "\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\004\004\005\001\002\000\004\002\142\001" +
    "\002\000\016\006\014\007\017\010\010\036\022\041\016" +
    "\051\015\001\002\000\004\045\ufff8\001\002\000\004\045" +
    "\ufffc\001\002\000\004\051\137\001\002\000\004\045\ufffa" +
    "\001\002\000\020\005\136\006\014\007\017\010\010\036" +
    "\022\041\016\051\015\001\002\000\004\045\135\001\002" +
    "\000\004\051\132\001\002\000\004\035\130\001\002\000" +
    "\004\011\123\001\002\000\004\051\120\001\002\000\004" +
    "\045\ufffb\001\002\000\004\045\ufffd\001\002\000\004\011" +
    "\024\001\002\000\004\045\ufff9\001\002\000\030\011\042" +
    "\014\025\021\041\022\036\023\033\026\032\046\027\047" +
    "\026\050\034\051\035\052\037\001\002\000\030\011\042" +
    "\014\025\021\041\022\036\023\033\026\032\046\027\047" +
    "\026\050\034\051\035\052\037\001\002\000\042\012\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\024" +
    "\uffcd\025\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\045\uffcd\001\002\000\042\012\uffce\013\uffce\014" +
    "\uffce\015\uffce\016\uffce\017\uffce\020\uffce\024\uffce\025\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\045" +
    "\uffce\001\002\000\032\012\uffe8\013\uffe8\014\uffe8\015\071" +
    "\016\066\017\067\020\065\024\072\025\uffe8\027\uffe8\030" +
    "\uffe8\045\uffe8\001\002\000\020\012\uffec\013\060\014\061" +
    "\025\062\027\uffec\030\uffec\045\uffec\001\002\000\030\011" +
    "\042\014\025\021\041\022\036\023\033\026\032\046\027" +
    "\047\026\050\034\051\035\052\037\001\002\000\004\011" +
    "\113\001\002\000\042\012\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\024\uffd6\025\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\045\uffd6\001\002" +
    "\000\042\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017" +
    "\uffcf\020\uffcf\024\uffcf\025\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\045\uffcf\001\002\000\004\011" +
    "\110\001\002\000\042\012\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\016\uffd4\017\uffd4\020\uffd4\024\uffd4\025\uffd4\027\uffd4\030" +
    "\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\045\uffd4\001\002" +
    "\000\042\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\024\uffdc\025\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\045\uffdc\001\002\000\004\011" +
    "\105\001\002\000\030\011\042\014\025\021\041\022\036" +
    "\023\033\026\032\046\027\047\026\050\034\051\035\052" +
    "\037\001\002\000\010\012\055\027\054\030\053\001\002" +
    "\000\042\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\024\uffe3\025\uffe3\027\uffe3\030\uffe3\031\051" +
    "\032\050\033\045\034\046\045\uffe3\001\002\000\030\011" +
    "\uffd9\014\uffd9\021\uffd9\022\uffd9\023\uffd9\026\uffd9\046\uffd9" +
    "\047\uffd9\050\uffd9\051\uffd9\052\uffd9\001\002\000\030\011" +
    "\uffd8\014\uffd8\021\uffd8\022\uffd8\023\uffd8\026\uffd8\046\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\052\uffd8\001\002\000\030\011" +
    "\042\014\025\021\041\022\036\023\033\026\032\046\027" +
    "\047\026\050\034\051\035\052\037\001\002\000\030\011" +
    "\uffda\014\uffda\021\uffda\022\uffda\023\uffda\026\uffda\046\uffda" +
    "\047\uffda\050\uffda\051\uffda\052\uffda\001\002\000\030\011" +
    "\uffdb\014\uffdb\021\uffdb\022\uffdb\023\uffdb\026\uffdb\046\uffdb" +
    "\047\uffdb\050\uffdb\051\uffdb\052\uffdb\001\002\000\042\012" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\024\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\045\uffdd\001\002\000\030\011\uffea\014\uffea" +
    "\021\uffea\022\uffea\023\uffea\026\uffea\046\uffea\047\uffea\050" +
    "\uffea\051\uffea\052\uffea\001\002\000\030\011\uffeb\014\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\026\uffeb\046\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\052\uffeb\001\002\000\016\006\014\007\017" +
    "\010\010\036\022\041\016\051\015\001\002\000\030\011" +
    "\042\014\025\021\041\022\036\023\033\026\032\046\027" +
    "\047\026\050\034\051\035\052\037\001\002\000\020\012" +
    "\uffed\013\060\014\061\025\062\027\uffed\030\uffed\045\uffed" +
    "\001\002\000\030\011\uffe7\014\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\026\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7" +
    "\001\002\000\030\011\uffe6\014\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\026\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\001\002\000\030\011\uffe5\014\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\026\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5" +
    "\001\002\000\030\011\042\014\025\021\041\022\036\023" +
    "\033\026\032\046\027\047\026\050\034\051\035\052\037" +
    "\001\002\000\032\012\uffe9\013\uffe9\014\uffe9\015\071\016" +
    "\066\017\067\020\065\024\072\025\uffe9\027\uffe9\030\uffe9" +
    "\045\uffe9\001\002\000\030\011\uffde\014\uffde\021\uffde\022" +
    "\uffde\023\uffde\026\uffde\046\uffde\047\uffde\050\uffde\051\uffde" +
    "\052\uffde\001\002\000\030\011\uffe2\014\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\026\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\001\002\000\030\011\uffdf\014\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\026\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf" +
    "\052\uffdf\001\002\000\030\011\042\014\025\021\041\022" +
    "\036\023\033\026\032\046\027\047\026\050\034\051\035" +
    "\052\037\001\002\000\030\011\uffe1\014\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\026\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\052\uffe1\001\002\000\030\011\uffe0\014\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\026\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0" +
    "\052\uffe0\001\002\000\042\012\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\024\uffe4\025\uffe4\027\uffe4" +
    "\030\uffe4\031\051\032\050\033\045\034\046\045\uffe4\001" +
    "\002\000\022\006\014\007\017\010\010\036\022\037\076" +
    "\040\077\041\016\051\015\001\002\000\004\045\102\001" +
    "\002\000\016\006\014\007\017\010\010\036\022\041\016" +
    "\051\015\001\002\000\004\045\ufff0\001\002\000\020\006" +
    "\014\007\017\010\010\036\022\040\101\041\016\051\015" +
    "\001\002\000\004\045\uffef\001\002\000\026\005\uffff\006" +
    "\uffff\007\uffff\010\uffff\036\uffff\037\uffff\040\uffff\041\uffff" +
    "\042\uffff\051\uffff\001\002\000\010\012\104\027\054\030" +
    "\053\001\002\000\042\012\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\024\uffd7\025\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\045\uffd7\001\002" +
    "\000\030\011\042\014\025\021\041\022\036\023\033\026" +
    "\032\046\027\047\026\050\034\051\035\052\037\001\002" +
    "\000\004\012\107\001\002\000\042\012\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\024\uffd3\025\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\045" +
    "\uffd3\001\002\000\030\011\042\014\025\021\041\022\036" +
    "\023\033\026\032\046\027\047\026\050\034\051\035\052" +
    "\037\001\002\000\004\012\112\001\002\000\042\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\024" +
    "\uffd2\025\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2" +
    "\034\uffd2\045\uffd2\001\002\000\030\011\042\014\025\021" +
    "\041\022\036\023\033\026\032\046\027\047\026\050\034" +
    "\051\035\052\037\001\002\000\004\012\115\001\002\000" +
    "\042\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\024\uffd1\025\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\045\uffd1\001\002\000\042\012\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\024" +
    "\uffd0\025\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\045\uffd0\001\002\000\042\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\024\uffd5\025\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\045" +
    "\uffd5\001\002\000\006\035\121\045\ufff6\001\002\000\030" +
    "\011\042\014\025\021\041\022\036\023\033\026\032\046" +
    "\027\047\026\050\034\051\035\052\037\001\002\000\010" +
    "\027\054\030\053\045\ufff3\001\002\000\030\011\042\014" +
    "\025\021\041\022\036\023\033\026\032\046\027\047\026" +
    "\050\034\051\035\052\037\001\002\000\010\012\125\027" +
    "\054\030\053\001\002\000\016\006\014\007\017\010\010" +
    "\036\022\041\016\051\015\001\002\000\020\006\014\007" +
    "\017\010\010\036\022\041\016\042\127\051\015\001\002" +
    "\000\004\045\uffee\001\002\000\030\011\042\014\025\021" +
    "\041\022\036\023\033\026\032\046\027\047\026\050\034" +
    "\051\035\052\037\001\002\000\010\027\054\030\053\045" +
    "\ufff1\001\002\000\006\035\133\045\ufff7\001\002\000\030" +
    "\011\042\014\025\021\041\022\036\023\033\026\032\046" +
    "\027\047\026\050\034\051\035\052\037\001\002\000\010" +
    "\027\054\030\053\045\ufff4\001\002\000\026\005\ufffe\006" +
    "\ufffe\007\ufffe\010\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe" +
    "\042\ufffe\051\ufffe\001\002\000\004\002\001\001\002\000" +
    "\006\035\140\045\ufff5\001\002\000\030\011\042\014\025" +
    "\021\041\022\036\023\033\026\032\046\027\047\026\050" +
    "\034\051\035\052\037\001\002\000\010\027\054\030\053" +
    "\045\ufff2\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\004\003\003\001\001\000\002\001\001\000" +
    "\022\004\011\005\012\006\020\007\006\010\017\011\010" +
    "\012\022\013\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\074" +
    "\006\020\007\006\010\017\011\010\012\022\013\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\014\042\015\030\016\027\017\043\021\037\001\001\000" +
    "\004\021\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\067\001\001\000\004\023\062\001\001\000" +
    "\004\021\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\102\015\030" +
    "\016\027\017\043\021\037\001\001\000\004\022\055\001" +
    "\001\000\004\025\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\073\005\012\006\020\007\006\010" +
    "\017\011\010\012\022\013\005\001\001\000\012\015\056" +
    "\016\027\017\043\021\037\001\001\000\004\023\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\063\017\043\021\037\001\001\000\004\024" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\072\021\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\046\001\001\000\020" +
    "\005\074\006\020\007\006\010\017\011\010\012\022\013" +
    "\005\001\001\000\002\001\001\000\022\004\077\005\012" +
    "\006\020\007\006\010\017\011\010\012\022\013\005\001" +
    "\001\000\002\001\001\000\020\005\074\006\020\007\006" +
    "\010\017\011\010\012\022\013\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\055\001\001\000\002" +
    "\001\001\000\004\021\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\014\121\015\030\016\027\017" +
    "\043\021\037\001\001\000\004\022\055\001\001\000\014" +
    "\014\123\015\030\016\027\017\043\021\037\001\001\000" +
    "\004\022\055\001\001\000\022\004\125\005\012\006\020" +
    "\007\006\010\017\011\010\012\022\013\005\001\001\000" +
    "\020\005\074\006\020\007\006\010\017\011\010\012\022" +
    "\013\005\001\001\000\002\001\001\000\014\014\130\015" +
    "\030\016\027\017\043\021\037\001\001\000\004\022\055" +
    "\001\001\000\002\001\001\000\014\014\133\015\030\016" +
    "\027\017\043\021\037\001\001\000\004\022\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\014\140\015\030\016\027\017\043\021\037\001\001" +
    "\000\004\022\055\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // fact3 ::= FALSO 
            {
              Expresion RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new Factor(TipoF.BOOL, new Booleano(false)); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // fact3 ::= CIERTO 
            {
              Expresion RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new Factor(TipoF.BOOL, new Booleano(true)); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // fact3 ::= ID 
            {
              Expresion RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  Factor e = new Factor (TipoF.ID, i); RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // fact3 ::= NOLOG fact3 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprUna (OperadorU.NOT, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // fact3 ::= REDONDEAR APARENT fact3 CPARENT 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new ExprUna (OperadorU.REDONDEO, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // fact3 ::= PISO APARENT fact3 CPARENT 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new ExprUna (OperadorU.PISO, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // fact3 ::= TECHO APARENT fact3 CPARENT 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new ExprUna (OperadorU.TECHO, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // fact3 ::= REAL 
            {
              Expresion RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Factor (TipoF.FLOAT, n); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // fact3 ::= MENOS fact3 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprUna (OperadorU.MENOS, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // fact3 ::= NUMERO 
            {
              Expresion RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Factor (TipoF.INT, n); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // fact3 ::= APARENT expr CPARENT 
            {
              Expresion RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // oBinC ::= MENORIGUAL 
            {
              OperadorB RESULT = null;
		 RESULT = OperadorB.MENORIGUAL; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*oBinC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // oBinC ::= MAYORIGUAL 
            {
              OperadorB RESULT = null;
		 RESULT = OperadorB.MAYORIGUAL; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*oBinC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // oBinC ::= MENOR 
            {
              OperadorB RESULT = null;
		 RESULT = OperadorB.MENOR; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*oBinC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // oBinC ::= MAYOR 
            {
              OperadorB RESULT = null;
		 RESULT = OperadorB.MAYOR; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*oBinC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // fact ::= fact3 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = f; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // fact ::= fact oBinC fact3 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OperadorB o = (OperadorB)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprBin(e1, o, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // oBin2 ::= MOD 
            {
              OperadorB RESULT = null;
		 RESULT = OperadorB.MOD; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*oBin2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // oBin2 ::= DIV 
            {
              OperadorB RESULT = null;
		 RESULT = OperadorB.DIVE; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*oBin2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // oBin2 ::= YLOG 
            {
              OperadorB RESULT = null;
		 RESULT = OperadorB.AND; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*oBin2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // oBin2 ::= POR 
            {
              OperadorB RESULT = null;
		 RESULT = OperadorB.MULT; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*oBin2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // oBin2 ::= ENTRE 
            {
              OperadorB RESULT = null;
		 RESULT = OperadorB.DIVR; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*oBin2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // term ::= fact 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = f; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // term ::= term oBin2 fact 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OperadorB o = (OperadorB)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprBin(e1, o, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // oBin ::= OLOG 
            {
              OperadorB RESULT = null;
		 RESULT = OperadorB.OR; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*oBin*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // oBin ::= MENOS 
            {
              OperadorB RESULT = null;
		 RESULT = OperadorB.RESTA; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*oBin*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // oBin ::= MAS 
            {
              OperadorB RESULT = null;
		 RESULT = OperadorB.SUMA; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*oBin*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr2 ::= term 
            {
              Expresion RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr2 ::= expr2 oBin term 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OperadorB o = (OperadorB)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, o ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // oBinEq ::= DIF 
            {
              OperadorB RESULT = null;
		 RESULT = OperadorB.DESIGUAL; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*oBinEq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // oBinEq ::= IGUAL 
            {
              OperadorB RESULT = null;
		 RESULT = OperadorB.IGUAL; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*oBinEq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr2 
            {
              Expresion RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr oBinEq expr2 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OperadorB o = (OperadorB)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, o, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // iHacer ::= HACER APARENT expr CPARENT lInst FINHACER 
            {
              Control RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Control l = (Control)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  Control c = new Control(new InstDo(e, l)); 
                    l.setBloqueExterno(c);
                    RESULT = c;
                
              CUP$parser$result = new java_cup.runtime.Symbol(9/*iHacer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // iSino ::= SI APARENT expr CPARENT lInst SINO lInst FINSI 
            {
              Control RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Control l1 = (Control)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Control l2 = (Control)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  Control c = new Control(new InstIfElse(e, l1,l2)); 
                    l1.setBloqueExterno(c);
                    l2.setBloqueExterno(c);
                    RESULT =  c;
                
              CUP$parser$result = new java_cup.runtime.Symbol(8/*iSino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // iSi ::= SI APARENT expr CPARENT lInst FINSI 
            {
              Control RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Control l = (Control)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  Control c = new Control(new InstIf(e, l ));
                    l.setBloqueExterno(c);
                    RESULT =  c;
                
              CUP$parser$result = new java_cup.runtime.Symbol(7/*iSi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // iAsig ::= ID ASIGNACION expr 
            {
              Control RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  
                    RESULT = new Control(new InstAsig(d, e)); 
                
              CUP$parser$result = new java_cup.runtime.Symbol(6/*iAsig*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // iDeclA ::= DECLBOOL ID ASIGNACION expr 
            {
              Control RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  Informacion info = new Informacion(i,t.text,null); //null hay q reemplazarlo
                    RESULT = new Control(new InstDeclAsig(t.text, i,e ),i, info); 
                
              CUP$parser$result = new java_cup.runtime.Symbol(5/*iDeclA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // iDeclA ::= DECLREAL ID ASIGNACION expr 
            {
              Control RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  Informacion info = new Informacion(i,t.text,null); //null hay q reemplazarlo
                    RESULT = new Control(new InstDeclAsig(t.text,i,e ),i, info); 
                
              CUP$parser$result = new java_cup.runtime.Symbol(5/*iDeclA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // iDeclA ::= DECLENTERO ID ASIGNACION expr 
            {
              Control RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  Informacion info = new Informacion(i,t.text,null); //null hay q reemplazarlo
                    RESULT = new Control(new InstDeclAsig(t.text, i,e ),i, info); 
                
              CUP$parser$result = new java_cup.runtime.Symbol(5/*iDeclA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // iDecl ::= DECLBOOL ID 
            {
              Control RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  Informacion info = new Informacion(i,t.text,null);
                    RESULT = new Control(new InstDecl(t.text, i),i,info); 
                
              CUP$parser$result = new java_cup.runtime.Symbol(4/*iDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // iDecl ::= DECLREAL ID 
            {
              Control RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  Informacion info = new Informacion(i,t.text,null);
                    RESULT = new Control(new InstDecl(t.text, i),i,info); 
                
              CUP$parser$result = new java_cup.runtime.Symbol(4/*iDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // iDecl ::= DECLENTERO ID 
            {
              Control RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  Informacion info = new Informacion(i,t.text,null);
                    RESULT = new Control(new InstDecl(t.text, i),i,info); 
                
              CUP$parser$result = new java_cup.runtime.Symbol(4/*iDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inst ::= iHacer 
            {
              Control RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Control i = (Control)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inst ::= iSino 
            {
              Control RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Control i = (Control)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inst ::= iSi 
            {
              Control RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Control i = (Control)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inst ::= iAsig 
            {
              Control RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Control i = (Control)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inst ::= iDeclA 
            {
              Control RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Control i = (Control)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inst ::= iDecl 
            {
              Control RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Control i = (Control)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lInst ::= inst PYCOMA 
            {
              Control RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Control i = (Control)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*lInst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lInst ::= lInst inst PYCOMA 
            {
              Control RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Control c = (Control)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Control i = (Control)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue p = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  if(!c.agregar(i)){
                        System.out.println("Error en la linea "+p.lineBegin);
                    }
                    RESULT = c; 
                
              CUP$parser$result = new java_cup.runtime.Symbol(2/*lInst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= s EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Control start_val = (Control)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // s ::= COMIENZO lInst FIN 
            {
              Control RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Control c = (Control)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 c.imprimir(); RESULT = c; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

