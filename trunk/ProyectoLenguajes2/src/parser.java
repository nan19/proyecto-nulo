
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun May 18 15:50:42 CDT 2008
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Sun May 18 15:50:42 CDT 2008
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\003\005\000\002\002\004\000\002\004" +
    "\005\000\002\022\002\000\002\023\002\000\002\005\004" +
    "\000\002\005\003\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\004\000\002\006\003\000\002\006" +
    "\003\000\002\007\004\000\002\011\006\000\002\012\005" +
    "\000\002\013\010\000\002\014\012\000\002\015\010\000" +
    "\002\016\006\000\002\017\007\000\002\010\003\000\002" +
    "\010\003\000\002\035\013\000\002\036\014\000\002\044" +
    "\002\000\002\037\007\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\040\005\000\002\041\005\000\002" +
    "\042\005\000\002\043\006\000\002\043\004\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\003\000\002\020\005\000\002\021\005" +
    "\000\002\021\003\000\002\021\004\000\002\021\003\000" +
    "\002\021\006\000\002\021\006\000\002\021\006\000\002" +
    "\021\004\000\002\021\003\000\002\021\006\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\050\006" +
    "\000\002\050\005\000\002\050\003\000\002\034\005\000" +
    "\002\034\003\000\002\024\003\000\002\024\006\000\002" +
    "\024\005\000\002\024\005\000\002\024\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\054\004" +
    "\000\002\054\006\000\002\030\013\000\002\053\007\000" +
    "\002\053\006\000\002\032\005\000\002\033\005\000\002" +
    "\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\004\014\004\001\002\000\030\004\ufffe\006" +
    "\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\023\ufffe\031\ufffe" +
    "\060\ufffe\063\ufffe\071\ufffe\001\002\000\004\002\006\001" +
    "\002\000\004\002\000\001\002\000\030\004\030\006\040" +
    "\016\021\017\042\020\041\021\031\023\035\031\012\060" +
    "\037\063\043\071\023\001\002\000\004\015\011\001\002" +
    "\000\004\002\001\001\002\000\006\032\277\070\300\001" +
    "\002\000\040\004\030\006\040\015\ufffd\016\021\017\042" +
    "\020\041\021\031\023\035\031\012\060\037\061\ufffd\062" +
    "\ufffd\063\043\064\ufffd\071\023\001\002\000\044\004\ufff2" +
    "\005\ufff2\006\ufff2\007\ufff2\015\ufff2\016\ufff2\017\ufff2\020" +
    "\ufff2\021\ufff2\023\ufff2\031\ufff2\060\ufff2\061\ufff2\062\ufff2" +
    "\063\ufff2\064\ufff2\071\ufff2\001\002\000\044\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\023\ufff7\031\ufff7\060\ufff7\061\ufff7\062\ufff7\063" +
    "\ufff7\064\ufff7\071\ufff7\001\002\000\004\071\273\001\002" +
    "\000\044\004\ufffb\005\ufffb\006\ufffb\007\ufffb\015\ufffb\016" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\023\ufffb\031\ufffb\060\ufffb" +
    "\061\ufffb\062\ufffb\063\ufffb\064\ufffb\071\ufffb\001\002\000" +
    "\044\004\ufff6\005\ufff6\006\ufff6\007\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\023\ufff6\031\ufff6\060\ufff6\061" +
    "\ufff6\062\ufff6\063\ufff6\064\ufff6\071\ufff6\001\002\000\006" +
    "\024\uffb1\071\uffb1\001\002\000\004\065\272\001\002\000" +
    "\014\027\267\031\uffb9\034\uffb9\057\uffb9\071\uffb2\001\002" +
    "\000\044\004\ufff5\005\ufff5\006\ufff5\007\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\023\ufff5\031\ufff5\060\ufff5" +
    "\061\ufff5\062\ufff5\063\ufff5\064\ufff5\071\ufff5\001\002\000" +
    "\004\065\266\001\002\000\044\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\023" +
    "\uffe8\031\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8" +
    "\071\uffe8\001\002\000\006\024\uffb6\071\uffb6\001\002\000" +
    "\016\016\021\017\042\020\041\021\031\031\012\071\203" +
    "\001\002\000\016\016\021\017\042\020\041\021\031\031" +
    "\012\071\203\001\002\000\010\031\160\034\157\057\244" +
    "\001\002\000\004\065\243\001\002\000\044\004\uffe9\005" +
    "\uffe9\006\uffe9\007\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\023\uffe9\031\uffe9\060\uffe9\061\uffe9\062\uffe9\063" +
    "\uffe9\064\uffe9\071\uffe9\001\002\000\004\071\237\001\002" +
    "\000\044\004\ufff3\005\ufff3\006\ufff3\007\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\020\ufff3\021\ufff3\023\ufff3\031\ufff3\060\ufff3" +
    "\061\ufff3\062\ufff3\063\ufff3\064\ufff3\071\ufff3\001\002\000" +
    "\004\027\227\001\002\000\004\071\165\001\002\000\006" +
    "\024\uffaf\071\uffaf\001\002\000\006\024\uffb0\071\uffb0\001" +
    "\002\000\004\027\046\001\002\000\004\065\045\001\002" +
    "\000\044\004\ufff9\005\ufff9\006\ufff9\007\ufff9\015\ufff9\016" +
    "\ufff9\017\ufff9\020\ufff9\021\ufff9\023\ufff9\031\ufff9\060\ufff9" +
    "\061\ufff9\062\ufff9\063\ufff9\064\ufff9\071\ufff9\001\002\000" +
    "\032\027\064\031\061\036\047\043\062\044\057\045\063" +
    "\050\055\066\051\067\050\070\053\071\056\072\060\001" +
    "\002\000\032\027\064\031\061\036\047\043\062\044\057" +
    "\045\063\050\055\066\051\067\050\070\053\071\056\072" +
    "\060\001\002\000\050\030\uffbd\032\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\046" +
    "\uffbd\047\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd" +
    "\056\uffbd\065\uffbd\001\002\000\050\030\uffbe\032\uffbe\033" +
    "\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\046\uffbe\047\uffbe\051\uffbe\052\uffbe\053\uffbe\054" +
    "\uffbe\055\uffbe\056\uffbe\065\uffbe\001\002\000\050\030\uffbc" +
    "\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\046\uffbc\047\uffbc\051\uffbc\052\uffbc" +
    "\053\uffbc\054\uffbc\055\uffbc\056\uffbc\065\uffbc\001\002\000" +
    "\050\030\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\042\uffc7\046\uffc7\047\uffc7\051" +
    "\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\065\uffc7" +
    "\001\002\000\052\030\uffc0\031\160\032\uffc0\033\uffc0\034" +
    "\157\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0" +
    "\046\uffc0\047\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055" +
    "\uffc0\056\uffc0\065\uffc0\001\002\000\032\027\064\031\061" +
    "\036\047\043\062\044\057\045\063\050\055\066\051\067" +
    "\050\070\053\071\056\072\060\001\002\000\054\027\150" +
    "\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\046\uffb9\047\uffb9" +
    "\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\065" +
    "\uffb9\001\002\000\004\027\145\001\002\000\050\030\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\046\uffc5\047\uffc5\051\uffc5\052\uffc5" +
    "\053\uffc5\054\uffc5\055\uffc5\056\uffc5\065\uffc5\001\002\000" +
    "\032\027\064\031\061\036\047\043\062\044\057\045\063" +
    "\050\055\066\051\067\050\070\053\071\056\072\060\001" +
    "\002\000\004\027\135\001\002\000\004\027\132\001\002" +
    "\000\032\027\064\031\061\036\047\043\062\044\057\045" +
    "\063\050\055\066\051\067\050\070\053\071\056\072\060" +
    "\001\002\000\042\030\106\034\071\035\100\036\070\037" +
    "\075\040\077\041\103\042\073\046\105\047\074\051\104" +
    "\052\076\053\102\054\072\055\101\056\067\001\002\000" +
    "\050\030\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\042\uffca\046\uffca\047\uffca\051" +
    "\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca\065\uffca" +
    "\001\002\000\032\027\064\031\061\036\047\043\062\044" +
    "\057\045\063\050\055\066\051\067\050\070\053\071\056" +
    "\072\060\001\002\000\032\027\064\031\061\036\047\043" +
    "\062\044\057\045\063\050\055\066\051\067\050\070\053" +
    "\071\056\072\060\001\002\000\032\027\064\031\061\036" +
    "\047\043\062\044\057\045\063\050\055\066\051\067\050" +
    "\070\053\071\056\072\060\001\002\000\032\027\064\031" +
    "\061\036\047\043\062\044\057\045\063\050\055\066\051" +
    "\067\050\070\053\071\056\072\060\001\002\000\032\027" +
    "\064\031\061\036\047\043\062\044\057\045\063\050\055" +
    "\066\051\067\050\070\053\071\056\072\060\001\002\000" +
    "\032\027\064\031\061\036\047\043\062\044\057\045\063" +
    "\050\055\066\051\067\050\070\053\071\056\072\060\001" +
    "\002\000\032\027\064\031\061\036\047\043\062\044\057" +
    "\045\063\050\055\066\051\067\050\070\053\071\056\072" +
    "\060\001\002\000\032\027\064\031\061\036\047\043\062" +
    "\044\057\045\063\050\055\066\051\067\050\070\053\071" +
    "\056\072\060\001\002\000\032\027\064\031\061\036\047" +
    "\043\062\044\057\045\063\050\055\066\051\067\050\070" +
    "\053\071\056\072\060\001\002\000\032\027\064\031\061" +
    "\036\047\043\062\044\057\045\063\050\055\066\051\067" +
    "\050\070\053\071\056\072\060\001\002\000\032\027\064" +
    "\031\061\036\047\043\062\044\057\045\063\050\055\066" +
    "\051\067\050\070\053\071\056\072\060\001\002\000\032" +
    "\027\064\031\061\036\047\043\062\044\057\045\063\050" +
    "\055\066\051\067\050\070\053\071\056\072\060\001\002" +
    "\000\032\027\064\031\061\036\047\043\062\044\057\045" +
    "\063\050\055\066\051\067\050\070\053\071\056\072\060" +
    "\001\002\000\032\027\064\031\061\036\047\043\062\044" +
    "\057\045\063\050\055\066\051\067\050\070\053\071\056" +
    "\072\060\001\002\000\032\027\064\031\061\036\047\043" +
    "\062\044\057\045\063\050\055\066\051\067\050\070\053" +
    "\071\056\072\060\001\002\000\030\004\ufffe\006\ufffe\016" +
    "\ufffe\017\ufffe\020\ufffe\021\ufffe\023\ufffe\031\ufffe\060\ufffe" +
    "\063\ufffe\071\ufffe\001\002\000\004\064\110\001\002\000" +
    "\044\004\uffec\005\uffec\006\uffec\007\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\021\uffec\023\uffec\031\uffec\060\uffec\061" +
    "\uffec\062\uffec\063\uffec\064\uffec\071\uffec\001\002\000\050" +
    "\030\uffd5\032\uffd5\033\uffd5\034\071\035\100\036\070\037" +
    "\075\040\077\041\103\042\073\046\uffd5\047\uffd5\051\uffd5" +
    "\052\uffd5\053\102\054\072\055\101\056\067\065\uffd5\001" +
    "\002\000\050\030\uffd8\032\uffd8\033\uffd8\034\071\035\100" +
    "\036\070\037\075\040\077\041\103\042\073\046\105\047" +
    "\074\051\uffd8\052\uffd8\053\102\054\072\055\101\056\067" +
    "\065\uffd8\001\002\000\050\030\uffcc\032\uffcc\033\uffcc\034" +
    "\071\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc" +
    "\046\uffcc\047\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055" +
    "\uffcc\056\uffcc\065\uffcc\001\002\000\050\030\uffd4\032\uffd4" +
    "\033\uffd4\034\071\035\100\036\070\037\075\040\077\041" +
    "\103\042\073\046\uffd4\047\uffd4\051\uffd4\052\uffd4\053\uffd4" +
    "\054\uffd4\055\uffd4\056\uffd4\065\uffd4\001\002\000\050\030" +
    "\uffd2\032\uffd2\033\uffd2\034\071\035\100\036\070\037\075" +
    "\040\077\041\103\042\073\046\uffd2\047\uffd2\051\uffd2\052" +
    "\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\065\uffd2\001\002" +
    "\000\050\030\uffd0\032\uffd0\033\uffd0\034\071\035\uffd0\036" +
    "\uffd0\037\075\040\077\041\103\042\073\046\uffd0\047\uffd0" +
    "\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\065" +
    "\uffd0\001\002\000\050\030\uffce\032\uffce\033\uffce\034\071" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\046" +
    "\uffce\047\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce" +
    "\056\uffce\065\uffce\001\002\000\050\030\uffd7\032\uffd7\033" +
    "\uffd7\034\071\035\100\036\070\037\075\040\077\041\103" +
    "\042\073\046\105\047\074\051\uffd7\052\uffd7\053\102\054" +
    "\072\055\101\056\067\065\uffd7\001\002\000\050\030\uffcd" +
    "\032\uffcd\033\uffcd\034\071\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\046\uffcd\047\uffcd\051\uffcd\052\uffcd" +
    "\053\uffcd\054\uffcd\055\uffcd\056\uffcd\065\uffcd\001\002\000" +
    "\050\030\uffd6\032\uffd6\033\uffd6\034\071\035\100\036\070" +
    "\037\075\040\077\041\103\042\073\046\105\047\uffd6\051" +
    "\uffd6\052\uffd6\053\102\054\072\055\101\056\067\065\uffd6" +
    "\001\002\000\050\030\uffcb\032\uffcb\033\uffcb\034\071\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\046\uffcb" +
    "\047\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056" +
    "\uffcb\065\uffcb\001\002\000\050\030\uffd3\032\uffd3\033\uffd3" +
    "\034\071\035\100\036\070\037\075\040\077\041\103\042" +
    "\073\046\uffd3\047\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3" +
    "\055\uffd3\056\uffd3\065\uffd3\001\002\000\050\030\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\041\uffc9\042\uffc9\046\uffc9\047\uffc9\051\uffc9\052\uffc9\053" +
    "\uffc9\054\uffc9\055\uffc9\056\uffc9\065\uffc9\001\002\000\050" +
    "\030\uffcf\032\uffcf\033\uffcf\034\071\035\uffcf\036\uffcf\037" +
    "\075\040\077\041\103\042\073\046\uffcf\047\uffcf\051\uffcf" +
    "\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\065\uffcf\001" +
    "\002\000\050\030\uffd1\032\uffd1\033\uffd1\034\071\035\100" +
    "\036\070\037\075\040\077\041\103\042\073\046\uffd1\047" +
    "\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1" +
    "\065\uffd1\001\002\000\042\030\131\034\071\035\100\036" +
    "\070\037\075\040\077\041\103\042\073\046\105\047\074" +
    "\051\104\052\076\053\102\054\072\055\101\056\067\001" +
    "\002\000\050\030\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\046\uffc8\047" +
    "\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8" +
    "\065\uffc8\001\002\000\032\027\064\031\061\036\047\043" +
    "\062\044\057\045\063\050\055\066\051\067\050\070\053" +
    "\071\056\072\060\001\002\000\004\030\134\001\002\000" +
    "\050\030\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\042\uffc2\046\uffc2\047\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\065\uffc2" +
    "\001\002\000\032\027\064\031\061\036\047\043\062\044" +
    "\057\045\063\050\055\066\051\067\050\070\053\071\056" +
    "\072\060\001\002\000\004\030\137\001\002\000\050\030" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\046\uffc4\047\uffc4\051\uffc4\052" +
    "\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\065\uffc4\001\002" +
    "\000\006\032\143\033\142\001\002\000\006\032\uffa7\033" +
    "\uffa7\001\002\000\032\027\064\031\061\036\047\043\062" +
    "\044\057\045\063\050\055\066\051\067\050\070\053\071" +
    "\056\072\060\001\002\000\050\030\uffa9\032\uffa9\033\uffa9" +
    "\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042" +
    "\uffa9\046\uffa9\047\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9" +
    "\055\uffa9\056\uffa9\065\uffa9\001\002\000\006\032\uffa8\033" +
    "\uffa8\001\002\000\032\027\064\031\061\036\047\043\062" +
    "\044\057\045\063\050\055\066\051\067\050\070\053\071" +
    "\056\072\060\001\002\000\004\030\147\001\002\000\050" +
    "\030\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\046\uffc3\047\uffc3\051\uffc3" +
    "\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\065\uffc3\001" +
    "\002\000\032\027\064\031\061\036\047\043\062\044\057" +
    "\045\063\050\055\066\051\067\050\070\053\071\056\072" +
    "\060\001\002\000\006\030\154\033\153\001\002\000\044" +
    "\030\uffb7\033\uffb7\034\071\035\100\036\070\037\075\040" +
    "\077\041\103\042\073\046\105\047\074\051\104\052\076" +
    "\053\102\054\072\055\101\056\067\001\002\000\032\027" +
    "\064\031\061\036\047\043\062\044\057\045\063\050\055" +
    "\066\051\067\050\070\053\071\056\072\060\001\002\000" +
    "\050\030\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\042\uffbf\046\uffbf\047\uffbf\051" +
    "\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\065\uffbf" +
    "\001\002\000\044\030\uffb8\033\uffb8\034\071\035\100\036" +
    "\070\037\075\040\077\041\103\042\073\046\105\047\074" +
    "\051\104\052\076\053\102\054\072\055\101\056\067\001" +
    "\002\000\050\030\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\046\uffc1\047" +
    "\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1" +
    "\065\uffc1\001\002\000\004\071\163\001\002\000\032\027" +
    "\064\031\061\036\047\043\062\044\057\045\063\050\055" +
    "\066\051\067\050\070\053\071\056\072\060\001\002\000" +
    "\042\032\162\034\071\035\100\036\070\037\075\040\077" +
    "\041\103\042\073\046\105\047\074\051\104\052\076\053" +
    "\102\054\072\055\101\056\067\001\002\000\054\030\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\046\uffbb\047\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\065" +
    "\uffbb\001\002\000\054\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042" +
    "\uffba\046\uffba\047\uffba\051\uffba\052\uffba\053\uffba\054\uffba" +
    "\055\uffba\056\uffba\057\uffba\065\uffba\001\002\000\050\030" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\042\uffc6\046\uffc6\047\uffc6\051\uffc6\052" +
    "\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\065\uffc6\001\002" +
    "\000\004\027\uffe5\001\002\000\004\027\167\001\002\000" +
    "\010\010\175\011\170\012\171\001\002\000\004\013\225" +
    "\001\002\000\004\013\223\001\002\000\004\030\216\001" +
    "\002\000\004\030\uffde\001\002\000\006\030\uffe0\065\211" +
    "\001\002\000\004\013\201\001\002\000\006\030\uffdf\065" +
    "\177\001\002\000\004\012\171\001\002\000\004\030\uffe2" +
    "\001\002\000\016\016\021\017\042\020\041\021\031\031" +
    "\012\071\203\001\002\000\010\030\uffdd\033\206\065\uffdd" +
    "\001\002\000\006\024\uffb2\071\uffb2\001\002\000\004\071" +
    "\205\001\002\000\010\030\uffd9\033\uffd9\065\uffd9\001\002" +
    "\000\016\016\021\017\042\020\041\021\031\031\012\071" +
    "\203\001\002\000\004\071\210\001\002\000\010\030\uffda" +
    "\033\uffda\065\uffda\001\002\000\006\011\170\012\171\001" +
    "\002\000\004\030\uffe3\001\002\000\006\030\uffe1\065\214" +
    "\001\002\000\004\012\171\001\002\000\004\030\uffe4\001" +
    "\002\000\030\004\030\006\040\016\021\017\042\020\041" +
    "\021\031\023\035\031\012\060\037\063\043\071\023\001" +
    "\002\000\032\004\030\006\040\007\ufffd\016\021\017\042" +
    "\020\041\021\031\023\035\031\012\060\037\063\043\071" +
    "\023\001\002\000\044\004\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\023\ufffc\031" +
    "\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\071\ufffc" +
    "\001\002\000\004\007\222\001\002\000\044\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\023\uffe7\031\uffe7\060\uffe7\061\uffe7\062\uffe7\063" +
    "\uffe7\064\uffe7\071\uffe7\001\002\000\016\016\021\017\042" +
    "\020\041\021\031\031\012\071\203\001\002\000\006\030" +
    "\uffdb\033\206\001\002\000\016\016\021\017\042\020\041" +
    "\021\031\031\012\071\203\001\002\000\010\030\uffdc\033" +
    "\206\065\uffdc\001\002\000\032\027\064\031\061\036\047" +
    "\043\062\044\057\045\063\050\055\066\051\067\050\070" +
    "\053\071\056\072\060\001\002\000\042\030\231\034\071" +
    "\035\100\036\070\037\075\040\077\041\103\042\073\046" +
    "\105\047\074\051\104\052\076\053\102\054\072\055\101" +
    "\056\067\001\002\000\030\004\ufffe\006\ufffe\016\ufffe\017" +
    "\ufffe\020\ufffe\021\ufffe\023\ufffe\031\ufffe\060\ufffe\063\ufffe" +
    "\071\ufffe\001\002\000\006\061\234\062\233\001\002\000" +
    "\044\004\uffee\005\uffee\006\uffee\007\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\021\uffee\023\uffee\031\uffee\060\uffee\061" +
    "\uffee\062\uffee\063\uffee\064\uffee\071\uffee\001\002\000\030" +
    "\004\ufffe\006\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\023" +
    "\ufffe\031\ufffe\060\ufffe\063\ufffe\071\ufffe\001\002\000\004" +
    "\062\236\001\002\000\044\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\023\uffed" +
    "\031\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed\071" +
    "\uffed\001\002\000\004\051\240\001\002\000\016\016\021" +
    "\017\042\020\041\021\031\031\012\071\203\001\002\000" +
    "\004\024\242\001\002\000\044\004\uffea\005\uffea\006\uffea" +
    "\007\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\023" +
    "\uffea\031\uffea\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea" +
    "\071\uffea\001\002\000\044\004\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\023\ufff8" +
    "\031\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8\071" +
    "\ufff8\001\002\000\032\027\064\031\061\036\047\043\062" +
    "\044\057\045\063\050\055\066\051\067\050\070\053\071" +
    "\056\072\060\001\002\000\042\034\071\035\100\036\070" +
    "\037\075\040\077\041\103\042\073\046\105\047\074\051" +
    "\104\052\076\053\102\054\072\055\101\056\067\065\uffef" +
    "\001\002\000\006\022\252\033\251\001\002\000\004\071" +
    "\250\001\002\000\006\022\uffae\033\uffae\001\002\000\016" +
    "\016\021\017\042\020\041\021\031\031\012\071\203\001" +
    "\002\000\006\024\uffb3\071\uffb3\001\002\000\004\071\254" +
    "\001\002\000\006\022\uffad\033\uffad\001\002\000\004\071" +
    "\256\001\002\000\004\027\uffe5\001\002\000\004\027\260" +
    "\001\002\000\016\016\021\017\042\020\041\021\031\031" +
    "\012\071\203\001\002\000\006\030\262\033\206\001\002" +
    "\000\030\004\030\006\040\016\021\017\042\020\041\021" +
    "\031\023\035\031\012\060\037\063\043\071\023\001\002" +
    "\000\032\004\030\005\ufffd\006\040\016\021\017\042\020" +
    "\041\021\031\023\035\031\012\060\037\063\043\071\023" +
    "\001\002\000\004\005\265\001\002\000\044\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\023\uffe6\031\uffe6\060\uffe6\061\uffe6\062\uffe6\063" +
    "\uffe6\064\uffe6\071\uffe6\001\002\000\044\004\ufff4\005\ufff4" +
    "\006\ufff4\007\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021" +
    "\ufff4\023\ufff4\031\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4" +
    "\064\ufff4\071\ufff4\001\002\000\032\027\064\031\061\036" +
    "\047\043\062\044\057\045\063\050\055\066\051\067\050" +
    "\070\053\071\056\072\060\001\002\000\006\030\271\033" +
    "\153\001\002\000\004\065\uffeb\001\002\000\044\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\015\ufffa\016\ufffa\017\ufffa\020" +
    "\ufffa\021\ufffa\023\ufffa\031\ufffa\060\ufffa\061\ufffa\062\ufffa" +
    "\063\ufffa\064\ufffa\071\ufffa\001\002\000\006\057\274\065" +
    "\ufff1\001\002\000\032\027\064\031\061\036\047\043\062" +
    "\044\057\045\063\050\055\066\051\067\050\070\053\071" +
    "\056\072\060\001\002\000\042\034\071\035\100\036\070" +
    "\037\075\040\077\041\103\042\073\046\105\047\074\051" +
    "\104\052\076\053\102\054\072\055\101\056\067\065\ufff0" +
    "\001\002\000\012\015\uffff\061\uffff\062\uffff\064\uffff\001" +
    "\002\000\016\016\021\017\042\020\041\021\031\031\012" +
    "\071\203\001\002\000\004\032\301\001\002\000\016\016" +
    "\021\017\042\020\041\021\031\031\012\071\203\001\002" +
    "\000\006\024\uffb5\071\uffb5\001\002\000\006\024\uffb4\071" +
    "\uffb4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\004\003\004\001\001\000\006\004\007\022" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\005\012\006\016\007\021\010\013\011\043\012\032\013" +
    "\014\014\017\015\023\016\024\017\035\024\015\031\026" +
    "\035\033\036\025\050\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\006\217\007\021" +
    "\010\013\011\043\012\032\013\014\014\017\015\023\016" +
    "\024\017\035\023\275\024\015\031\026\035\033\036\025" +
    "\050\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\254\031\026\001\001\000\010\024\246\031" +
    "\026\054\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\064\021\065\032\051\050\053\001\001" +
    "\000\010\021\163\032\051\050\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\021\155\032\051\050\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\140\032\051\033\137\050\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\127\021\065" +
    "\032\051\050\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\126\021\065\032\051\050\053\001\001" +
    "\000\012\020\125\021\065\032\051\050\053\001\001\000" +
    "\012\020\124\021\065\032\051\050\053\001\001\000\012" +
    "\020\123\021\065\032\051\050\053\001\001\000\012\020" +
    "\122\021\065\032\051\050\053\001\001\000\012\020\121" +
    "\021\065\032\051\050\053\001\001\000\012\020\120\021" +
    "\065\032\051\050\053\001\001\000\012\020\117\021\065" +
    "\032\051\050\053\001\001\000\012\020\116\021\065\032" +
    "\051\050\053\001\001\000\012\020\115\021\065\032\051" +
    "\050\053\001\001\000\012\020\114\021\065\032\051\050" +
    "\053\001\001\000\012\020\113\021\065\032\051\050\053" +
    "\001\001\000\012\020\112\021\065\032\051\050\053\001" +
    "\001\000\012\020\111\021\065\032\051\050\053\001\001" +
    "\000\012\020\110\021\065\032\051\050\053\001\001\000" +
    "\006\004\106\022\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\132\032\051\050\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\021" +
    "\135\032\051\050\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\021" +
    "\143\032\051\050\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\021\145\032\051\050\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\020\151\021\065" +
    "\032\051\034\150\050\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\154\021\065\032\051\050\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\160\021\065\032\051" +
    "\050\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\165\001\001" +
    "\000\002\001\001\000\012\037\171\040\173\041\175\042" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\177\001\001\000\002" +
    "\001\001\000\010\024\203\031\026\043\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\206\031\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\041\212\042\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\214\001" +
    "\001\000\002\001\001\000\042\005\216\006\016\007\021" +
    "\010\013\011\043\012\032\013\014\014\017\015\023\016" +
    "\024\017\035\024\015\031\026\035\033\036\025\050\031" +
    "\001\001\000\042\006\217\007\021\010\013\011\043\012" +
    "\032\013\014\014\017\015\023\016\024\017\035\023\220" +
    "\024\015\031\026\035\033\036\025\050\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\024\203\031\026\043\223\001\001\000\002\001\001\000" +
    "\010\024\203\031\026\043\225\001\001\000\002\001\001" +
    "\000\012\020\227\021\065\032\051\050\053\001\001\000" +
    "\002\001\001\000\006\004\231\022\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\234\022\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\240\031\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\244\021\065" +
    "\032\051\050\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\252" +
    "\031\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\256\001\001" +
    "\000\002\001\001\000\010\024\203\031\026\043\260\001" +
    "\001\000\002\001\001\000\042\005\262\006\016\007\021" +
    "\010\013\011\043\012\032\013\014\014\017\015\023\016" +
    "\024\017\035\024\015\031\026\035\033\036\025\050\031" +
    "\001\001\000\042\006\217\007\021\010\013\011\043\012" +
    "\032\013\014\014\017\015\023\016\024\017\035\023\263" +
    "\024\015\031\026\035\033\036\025\050\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\020\151\021\065\032\051\034\267\050\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\274\021\065\032\051\050\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\302" +
    "\031\026\001\001\000\002\001\001\000\006\024\301\031" +
    "\026\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    Bloque bloque = (Misc.acumulador != null)? Misc.acumulador : new Bloque();	
    boolean noError = true;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Lelem ::= fact 
            {
              LinkedList RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	LinkedList<Expresion> L = new LinkedList<Expresion>();
                        L.add(f);
                        RESULT = L;
                
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Lelem*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Lelem ::= Lelem COMA fact 
            {
              LinkedList RESULT = null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList L = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			L.add(f);
                        RESULT = L;
                
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Lelem*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // arreglo ::= ACORCH Lelem CCORCH 
            {
              LinkedList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*arreglo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lDiscr ::= fact APARENT LVar CPARENT 
            {
              HashMap RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TablaSim ts = (TablaSim)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    HashMap<Object,TablaSim> hm = new HashMap<Object,TablaSim>();
                    hm.put(f,ts);
                    RESULT = hm;
                
              CUP$parser$result = new java_cup.runtime.Symbol(41/*lDiscr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lDiscr ::= lDiscr fact APARENT LVar CPARENT 
            {
              HashMap RESULT = null;
		int hmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap hm = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TablaSim ts = (TablaSim)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    if(!hm.containsKey(f)){
                        hm.put(f,ts);
                    }
                    RESULT = hm;
                
              CUP$parser$result = new java_cup.runtime.Symbol(41/*lDiscr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tipoVan ::= REGISTRO LVar COMA CASO tipo ID ES lDiscr FINREG 
            {
              Tipo RESULT = null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		TablaSim ts = (TablaSim)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap hm = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
				Informacion info = new Informacion(i.text, t, null, 0);
				ts.add(i.text,info);
				RESULT = new TVariante(ts,i.text, (HashMap<Object,TablaSim>)hm); 
			
              CUP$parser$result = new java_cup.runtime.Symbol(22/*tipoVan*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LC ::= LC COMA tipo ID 
            {
              TablaSim RESULT = null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TablaSim ts = (TablaSim)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	Informacion info = new Informacion(i.text, t, null,0);		
			ts.add(i.text,info);
			RESULT = ts; 
		
              CUP$parser$result = new java_cup.runtime.Symbol(42/*LC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LC ::= tipo ID 
            {
              TablaSim RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	TablaSim ts = new TablaSim();
			Informacion info = new Informacion(i.text, t, null,0);	
			ts.add(i.text,info);
			RESULT = ts; 
		
              CUP$parser$result = new java_cup.runtime.Symbol(42/*LC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipoB ::= DECLBOOL 
            {
              TipoF RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = TipoF.BOOL; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*tipoB*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tipoB ::= DECLREAL 
            {
              TipoF RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = TipoF.FLOAT;  
              CUP$parser$result = new java_cup.runtime.Symbol(23/*tipoB*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tipoB ::= DECLENTERO 
            {
              TipoF RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = TipoF.INT; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*tipoB*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipo ::= ID 
            {
              Tipo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 //chequear en TS y obtener arbol de tipo
			
			
              CUP$parser$result = new java_cup.runtime.Symbol(18/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tipo ::= REGISTRO LC FINREG 
            {
              Tipo RESULT = null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TablaSim ts = (TablaSim)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TRegistro(ts); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipo ::= ACORCH CCORCH tipo 
            {
              Tipo RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TArreglo(t,-1); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipo ::= ACORCH ENTERO CCORCH tipo 
            {
              Tipo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TArreglo(t,i); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tipo ::= tipoB 
            {
              Tipo RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TipoF t = (TipoF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TBasico(t); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LParam ::= expr 
            {
              LinkedList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  LinkedList<Expresion> l = new LinkedList<Expresion>();
			l.add(e);
			RESULT = l;
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*LParam*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LParam ::= LParam COMA expr 
            {
              LinkedList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  l.add(e);
			RESULT = l;
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*LParam*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LVal ::= ID 
            {
              LValue RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Identificador(i.text); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*LVal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LVal ::= LVal PUNTO ID 
            {
              LValue RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LValue l = (LValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = new CampoRegistro(l, i.text); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*LVal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LVal ::= LVal ACORCH expr CCORCH 
            {
              LValue RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LValue l = (LValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = new ElemArreglo(l, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*LVal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // fact ::= arreglo 
            {
              Expresion RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Arreglo(TipoF.ARRAY, 0, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // fact ::= FALSO 
            {
              Expresion RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new Factor(TipoF.BOOL, new Booleano(false)); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // fact ::= CIERTO 
            {
              Expresion RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new Factor(TipoF.BOOL, new Booleano(true)); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // fact ::= ID APARENT LParam CPARENT 
            {
              Expresion RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // fact ::= LVal 
            {
              Expresion RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LValue i = (LValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  Factor e = new Factor (TipoF.LVAL, i); 	//cambiar
			noError = noError && e.esCorrecta(bloque, 0); 	//pasar numero de linea
			RESULT = e;
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // fact ::= NOLOG fact 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprUna (OperadorU.NOT, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // fact ::= REDONDEO APARENT fact CPARENT 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new ExprUna (OperadorU.REDONDEO, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // fact ::= PISO APARENT fact CPARENT 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new ExprUna (OperadorU.PISO, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // fact ::= TECHO APARENT fact CPARENT 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new ExprUna (OperadorU.TECHO, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // fact ::= REAL 
            {
              Expresion RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Factor (TipoF.FLOAT, n); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // fact ::= MENOS fact 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprUna (OperadorU.MENOS, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // fact ::= ENTERO 
            {
              Expresion RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Factor (TipoF.INT, n); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // fact ::= APARENT expr CPARENT 
            {
              Expresion RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr PUNTO expr 
            {
              Expresion RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= fact 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = f; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr MOD expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.MOD ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr DIV expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.DIVE ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr POR expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.MULT ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr ENTRE expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.DIVR ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr MENOS expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.RESTA ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr MAS expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.SUMA ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr MENORIGUAL expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.MENORIGUAL ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr MAYORIGUAL expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.MAYORIGUAL ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr MENOR expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.MENOR ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr MAYOR expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.MAYOR ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr YLOG expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.AND, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr OLOG expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.OR, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr DIF expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.DESIGUAL, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr IGUAL expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.IGUAL, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LVar ::= tipo ID 
            {
              TablaSim RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	
                        Informacion info = new Informacion(i.text, t, null, 0);
                        TablaSim ts = new TablaSim(null);
                        ts.add(i.text, info);
                        RESULT = ts;    
                            //bloque.getTS().add(i.text, info);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(33/*LVar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LVar ::= LVar COMA tipo ID 
            {
              TablaSim RESULT = null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TablaSim ts = (TablaSim)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			Informacion info = new Informacion(i.text, t, null, 0);
                        ts.add(i.text, info);
                        RESULT = ts;
			//bloque.getTS().add(i.text, info);
                        
                    
              CUP$parser$result = new java_cup.runtime.Symbol(33/*LVar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ParamS ::= SALIDA DOSPUNTOS LVar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*ParamS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ParamES ::= ENTSAL DOSPUNTOS LVar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*ParamES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ParamE ::= ENTRADA DOSPUNTOS LVar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*ParamE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Param ::= ParamS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*Param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Param ::= ParamES 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*Param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Param ::= ParamE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*Param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Param ::= ParamE PYCOMA ParamES 
            {
              Object RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*Param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Param ::= ParamES PYCOMA ParamS 
            {
              Object RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*Param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Param ::= ParamE PYCOMA ParamS 
            {
              Object RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*Param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Param ::= ParamE PYCOMA ParamES PYCOMA ParamS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*Param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // iniBProc ::= 
            {
              Object RESULT = null;
		 	bloque = new Bloque(bloque, false); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*iniBProc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Func ::= FUNC tipo ID iniBProc APARENT LVar CPARENT lInst finB FINFUNC 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bloque l = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			if (bloque.getTS().get(i.text) != null) {
					Informacion info = bloque.getTS().get(i.text);
					InfoSub is = (InfoSub)info.valor;				
					is.setBloque(b);
					info.setValor(is);				
					bloque.getTS().add(i.text, info);
				}
			
              CUP$parser$result = new java_cup.runtime.Symbol(28/*Func*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Proc ::= PROC ID iniBProc APARENT Param CPARENT lInst finB FINPROC 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bloque l = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			if (bloque.getTS().get(i.text) != null) {
					Informacion info = bloque.getTS().get(i.text);
					InfoSub is = (InfoSub)info.valor;				
					is.setBloque(b);
					info.setValor(is);
					bloque.getTS().add(i.text, info);
				}
			
              CUP$parser$result = new java_cup.runtime.Symbol(27/*Proc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SubProg ::= Func 
            {
              Inst RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*SubProg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SubProg ::= Proc 
            {
              Inst RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*SubProg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // iDefTipo ::= TIPODATO ID IGUAL tipo FINT 
            {
              Inst RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*iDefTipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // iLlamada ::= ID APARENT LParam CPARENT 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			if (!bloque.getTS().isDefined(i.text)) {
				noError = noError & false;
				System.out.println("ERROR (linea "+(i.lineBegin+1)+
					") El subprograma '"+i.text+"' no ha sido definido.");
			} else				
				RESULT = new InstProc(i.text, l);
			
		
              CUP$parser$result = new java_cup.runtime.Symbol(12/*iLlamada*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // iHacer ::= HACER APARENT expr CPARENT bloq FINHACER 
            {
              Inst RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque l = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstDo(e, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*iHacer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // iSino ::= SI APARENT expr CPARENT bloq SINO bloq FINSI 
            {
              Inst RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Bloque l1 = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque l2 = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstIfElse(e, l1,l2); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*iSino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // iSi ::= SI APARENT expr CPARENT bloq FINSI 
            {
              Inst RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque l = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstIf(e, l ); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*iSi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // iAsig ::= LVal ASIGNACION expr 
            {
              Inst RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LValue d = (LValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	InstAsig i = new InstAsig(d , e); 
			Informacion info = new Informacion(d.obtenerId(),TipoF.INT,e,0);			
			noError = noError && i.esCorrecta(bloque, info, a.lineBegin+1);
			RESULT = i; 
			//chequear que el LValue exista
        
              CUP$parser$result = new java_cup.runtime.Symbol(8/*iAsig*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // iDeclA ::= tipo ID ASIGNACION expr 
            {
              Inst RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  Decl inst = new Decl(t, i.text );	
			Informacion info = new Informacion(i.text,t,e,0);
			noError = noError && inst.esCorrecta(bloque, info, a.lineBegin+1);
			if (bloque.getTS().get(i.text) == null){
                            bloque.getTS().add(i.text,info);
                        }
			InstAsig insta = new InstAsig(new Identificador(i.text), e); 					
			noError = noError && insta.esCorrecta(bloque, info, a.lineBegin+1);				
			RESULT = insta;     
			//chequear que el LValue exista
        
              CUP$parser$result = new java_cup.runtime.Symbol(7/*iDeclA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Decl ::= tipo ID 
            {
              Inst RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  Decl inst = new Decl(t, i.text );	
			Informacion info = new Informacion(i.text,t,null, 0);
			/*if (t.equals(TipoF.INT)) 
				info.setValor(0);
			else if (t.equals(TipoF.FLOAT)) 
				info.setValor(0.0);
			else if (t.equals(TipoF.BOOL)) 
				info.setValor(new Booleano(false));*/
			noError = noError && inst.esCorrecta(bloque,info, i.lineBegin+1);			
			if (bloque.getTS().getLocally(i.text) == null) 
				bloque.getTS().add(i.text ,info);
                    RESULT = null;
        
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // inst ::= SubProg 
            {
              Inst RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inst ::= iDefTipo 
            {
              Inst RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inst ::= iLlamada PYCOMA 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inst ::= iHacer 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inst ::= iSino 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inst ::= iSi 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inst ::= iAsig PYCOMA 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inst ::= iDeclA PYCOMA 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inst ::= Decl PYCOMA 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lInst ::= inst 
            {
              Bloque RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 bloque.agregarInst(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*lInst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lInst ::= lInst inst 
            {
              Bloque RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 bloque.agregarInst(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*lInst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // finB ::= 
            {
              Bloque RESULT = null;
		 Bloque b = bloque; bloque = bloque.getParent(); RESULT = b; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*finB*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicB ::= 
            {
              Bloque RESULT = null;
		 bloque = new Bloque(bloque, true); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*inicB*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloq ::= inicB lInst finB 
            {
              Bloque RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = b; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*bloq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= COMIENZO bloq FIN 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 	//if (noError)
				b.imprimirB(0);
			
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*inicio*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

