
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun May 04 15:31:55 VET 2008
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Sun May 04 15:31:55 VET 2008
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\003\006\000\002\002\004\000\002\045" +
    "\004\000\002\045\003\000\002\045\002\000\002\004\005" +
    "\000\002\021\002\000\002\022\002\000\002\005\004\000" +
    "\002\005\003\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\004\000\002\007\004\000\002\007\010" +
    "\000\002\007\012\000\002\011\006\000\002\012\005\000" +
    "\002\013\010\000\002\014\012\000\002\015\010\000\002" +
    "\016\006\000\002\010\003\000\002\010\003\000\002\030" +
    "\013\000\002\031\014\000\002\037\002\000\002\032\007" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\033\005\000\002\034\005\000\002\035\005\000\002\036" +
    "\006\000\002\036\004\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\003" +
    "\000\002\017\005\000\002\020\005\000\002\020\003\000" +
    "\002\020\004\000\002\020\003\000\002\020\006\000\002" +
    "\020\006\000\002\020\006\000\002\020\004\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\042\003\000\002\042\004\000\002\042\005\000" +
    "\002\042\006\000\002\027\005\000\002\027\003\000\002" +
    "\024\003\000\002\024\004\000\002\024\004\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\043\010" +
    "\000\002\044\007\000\002\044\006\000\002\040\006\000" +
    "\002\040\005\000\002\041\005\000\002\041\004\000\002" +
    "\025\005\000\002\026\005\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\010\004\004\006\007\014\ufffd\001\002\000" +
    "\010\016\043\017\045\020\040\001\002\000\010\004\004" +
    "\006\007\014\310\001\002\000\010\004\uffe6\006\uffe6\014" +
    "\uffe6\001\002\000\004\066\014\001\002\000\010\004\ufffe" +
    "\006\ufffe\014\ufffe\001\002\000\010\004\uffe7\006\uffe7\014" +
    "\uffe7\001\002\000\004\002\013\001\002\000\004\002\000" +
    "\001\002\000\004\024\uffe3\001\002\000\004\024\016\001" +
    "\002\000\010\010\023\011\017\012\020\001\002\000\004" +
    "\013\305\001\002\000\004\013\303\001\002\000\004\025" +
    "\176\001\002\000\004\025\uffdc\001\002\000\004\013\035" +
    "\001\002\000\006\025\uffdd\062\033\001\002\000\006\025" +
    "\uffde\062\026\001\002\000\006\011\017\012\020\001\002" +
    "\000\004\025\uffe1\001\002\000\006\025\uffdf\062\031\001" +
    "\002\000\004\012\020\001\002\000\004\025\uffe2\001\002" +
    "\000\004\012\020\001\002\000\004\025\uffe0\001\002\000" +
    "\012\016\043\017\045\020\040\026\044\001\002\000\004" +
    "\066\175\001\002\000\010\025\uffdb\030\172\062\uffdb\001" +
    "\002\000\006\023\uffaf\066\uffaf\001\002\000\012\016\043" +
    "\017\045\020\040\026\160\001\002\000\012\016\043\017" +
    "\045\020\040\026\167\001\002\000\006\023\uffb1\066\uffb1" +
    "\001\002\000\034\024\064\026\061\027\053\033\050\040" +
    "\062\041\057\042\063\045\055\063\051\064\047\065\054" +
    "\066\056\067\060\001\002\000\006\023\uffb0\066\uffb0\001" +
    "\002\000\006\023\uffb4\066\uffb4\001\002\000\052\024\uffbc" +
    "\025\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\043\uffbc\044\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\062\uffbc\001" +
    "\002\000\032\024\064\026\061\033\050\040\062\041\057" +
    "\042\063\045\055\063\051\064\047\065\054\066\056\067" +
    "\060\001\002\000\052\024\uffbd\025\uffbd\027\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\043\uffbd\044\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd" +
    "\052\uffbd\053\uffbd\062\uffbd\001\002\000\052\024\uffbb\025" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\043\uffbb\044\uffbb\046\uffbb\047" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\062\uffbb\001\002" +
    "\000\012\016\uffa8\017\uffa8\020\uffa8\026\uffa8\001\002\000" +
    "\052\024\uffc5\025\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\043\uffc5\044" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\062\uffc5\001\002\000\032\024\064\026\061\033\050\040" +
    "\062\041\057\042\063\045\055\063\051\064\047\065\054" +
    "\066\056\067\060\001\002\000\056\024\152\025\uffba\026" +
    "\151\027\uffba\030\uffba\031\147\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\uffba\043\uffba\044\uffba\046\uffba\047" +
    "\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\062\uffba" +
    "\001\002\000\004\024\144\001\002\000\052\024\uffc3\025" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\037\uffc3\043\uffc3\044\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\062\uffc3\001\002" +
    "\000\032\024\064\026\061\033\050\040\062\041\057\042" +
    "\063\045\055\063\051\064\047\065\054\066\056\067\060" +
    "\001\002\000\004\024\134\001\002\000\004\024\131\001" +
    "\002\000\032\024\064\026\061\033\050\040\062\041\057" +
    "\042\063\045\055\063\051\064\047\065\054\066\056\067" +
    "\060\001\002\000\042\027\075\031\072\032\103\033\071" +
    "\034\077\035\101\036\104\037\074\043\107\044\100\046" +
    "\106\047\076\050\105\051\073\052\102\053\070\001\002" +
    "\000\052\024\uffbe\025\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\043\uffbe" +
    "\044\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\062\uffbe\001\002\000\050\025\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\043\uffc8\044\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\062\uffc8\001\002\000\032\024\064\026" +
    "\061\033\050\040\062\041\057\042\063\045\055\063\051" +
    "\064\047\065\054\066\056\067\060\001\002\000\032\024" +
    "\064\026\061\033\050\040\062\041\057\042\063\045\055" +
    "\063\051\064\047\065\054\066\056\067\060\001\002\000" +
    "\032\024\064\026\061\033\050\040\062\041\057\042\063" +
    "\045\055\063\051\064\047\065\054\066\056\067\060\001" +
    "\002\000\032\024\064\026\061\033\050\040\062\041\057" +
    "\042\063\045\055\063\051\064\047\065\054\066\056\067" +
    "\060\001\002\000\032\024\064\026\061\033\050\040\062" +
    "\041\057\042\063\045\055\063\051\064\047\065\054\066" +
    "\056\067\060\001\002\000\064\016\uffaa\017\uffaa\020\uffaa" +
    "\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032" +
    "\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\043\uffaa" +
    "\044\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\054\uffaa\062\uffaa\001\002\000\032\024\064\026\061" +
    "\033\050\040\062\041\057\042\063\045\055\063\051\064" +
    "\047\065\054\066\056\067\060\001\002\000\032\024\064" +
    "\026\061\033\050\040\062\041\057\042\063\045\055\063" +
    "\051\064\047\065\054\066\056\067\060\001\002\000\032" +
    "\024\064\026\061\033\050\040\062\041\057\042\063\045" +
    "\055\063\051\064\047\065\054\066\056\067\060\001\002" +
    "\000\032\024\064\026\061\033\050\040\062\041\057\042" +
    "\063\045\055\063\051\064\047\065\054\066\056\067\060" +
    "\001\002\000\032\024\064\026\061\033\050\040\062\041" +
    "\057\042\063\045\055\063\051\064\047\065\054\066\056" +
    "\067\060\001\002\000\032\024\064\026\061\033\050\040" +
    "\062\041\057\042\063\045\055\063\051\064\047\065\054" +
    "\066\056\067\060\001\002\000\032\024\064\026\061\033" +
    "\050\040\062\041\057\042\063\045\055\063\051\064\047" +
    "\065\054\066\056\067\060\001\002\000\032\024\064\026" +
    "\061\033\050\040\062\041\057\042\063\045\055\063\051" +
    "\064\047\065\054\066\056\067\060\001\002\000\032\024" +
    "\064\026\061\033\050\040\062\041\057\042\063\045\055" +
    "\063\051\064\047\065\054\066\056\067\060\001\002\000" +
    "\032\024\064\026\061\033\050\040\062\041\057\042\063" +
    "\045\055\063\051\064\047\065\054\066\056\067\060\001" +
    "\002\000\050\025\uffd3\027\uffd3\030\uffd3\031\072\032\103" +
    "\033\071\034\077\035\101\036\104\037\074\043\uffd3\044" +
    "\uffd3\046\uffd3\047\uffd3\050\105\051\073\052\102\053\070" +
    "\062\uffd3\001\002\000\050\025\uffd6\027\uffd6\030\uffd6\031" +
    "\072\032\103\033\071\034\077\035\101\036\104\037\074" +
    "\043\107\044\100\046\uffd6\047\uffd6\050\105\051\073\052" +
    "\102\053\070\062\uffd6\001\002\000\050\025\uffd2\027\uffd2" +
    "\030\uffd2\031\072\032\103\033\071\034\077\035\101\036" +
    "\104\037\074\043\uffd2\044\uffd2\046\uffd2\047\uffd2\050\uffd2" +
    "\051\uffd2\052\uffd2\053\uffd2\062\uffd2\001\002\000\050\025" +
    "\uffca\027\uffca\030\uffca\031\072\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\043\uffca\044\uffca\046\uffca\047" +
    "\uffca\050\uffca\051\uffca\052\uffca\053\uffca\062\uffca\001\002" +
    "\000\050\025\uffce\027\uffce\030\uffce\031\072\032\uffce\033" +
    "\uffce\034\077\035\101\036\104\037\074\043\uffce\044\uffce" +
    "\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\062" +
    "\uffce\001\002\000\050\025\uffd0\027\uffd0\030\uffd0\031\072" +
    "\032\103\033\071\034\077\035\101\036\104\037\074\043" +
    "\uffd0\044\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0" +
    "\053\uffd0\062\uffd0\001\002\000\050\025\uffcc\027\uffcc\030" +
    "\uffcc\031\072\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\043\uffcc\044\uffcc\046\uffcc\047\uffcc\050\uffcc\051" +
    "\uffcc\052\uffcc\053\uffcc\062\uffcc\001\002\000\050\025\uffd4" +
    "\027\uffd4\030\uffd4\031\072\032\103\033\071\034\077\035" +
    "\101\036\104\037\074\043\107\044\uffd4\046\uffd4\047\uffd4" +
    "\050\105\051\073\052\102\053\070\062\uffd4\001\002\000" +
    "\050\025\uffcb\027\uffcb\030\uffcb\031\072\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\037\uffcb\043\uffcb\044\uffcb\046" +
    "\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\062\uffcb" +
    "\001\002\000\050\025\uffd5\027\uffd5\030\uffd5\031\072\032" +
    "\103\033\071\034\077\035\101\036\104\037\074\043\107" +
    "\044\100\046\uffd5\047\uffd5\050\105\051\073\052\102\053" +
    "\070\062\uffd5\001\002\000\050\025\uffc9\027\uffc9\030\uffc9" +
    "\031\072\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\043\uffc9\044\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9" +
    "\052\uffc9\053\uffc9\062\uffc9\001\002\000\050\025\uffd1\027" +
    "\uffd1\030\uffd1\031\072\032\103\033\071\034\077\035\101" +
    "\036\104\037\074\043\uffd1\044\uffd1\046\uffd1\047\uffd1\050" +
    "\uffd1\051\uffd1\052\uffd1\053\uffd1\062\uffd1\001\002\000\050" +
    "\025\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\036\uffc7\037\uffc7\043\uffc7\044\uffc7\046\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\062\uffc7\001" +
    "\002\000\050\025\uffcd\027\uffcd\030\uffcd\031\072\032\uffcd" +
    "\033\uffcd\034\077\035\101\036\104\037\074\043\uffcd\044" +
    "\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd" +
    "\062\uffcd\001\002\000\050\025\uffcf\027\uffcf\030\uffcf\031" +
    "\072\032\103\033\071\034\077\035\101\036\104\037\074" +
    "\043\uffcf\044\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\062\uffcf\001\002\000\042\025\130\031\072" +
    "\032\103\033\071\034\077\035\101\036\104\037\074\043" +
    "\107\044\100\046\106\047\076\050\105\051\073\052\102" +
    "\053\070\001\002\000\052\024\uffc6\025\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\037\uffc6\043\uffc6\044\uffc6\046\uffc6\047\uffc6\050\uffc6\051" +
    "\uffc6\052\uffc6\053\uffc6\062\uffc6\001\002\000\032\024\064" +
    "\026\061\033\050\040\062\041\057\042\063\045\055\063" +
    "\051\064\047\065\054\066\056\067\060\001\002\000\004" +
    "\025\133\001\002\000\052\024\uffc0\025\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\043\uffc0\044\uffc0\046\uffc0\047\uffc0\050\uffc0\051" +
    "\uffc0\052\uffc0\053\uffc0\062\uffc0\001\002\000\032\024\064" +
    "\026\061\033\050\040\062\041\057\042\063\045\055\063" +
    "\051\064\047\065\054\066\056\067\060\001\002\000\004" +
    "\025\136\001\002\000\052\024\uffc2\025\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\043\uffc2\044\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\062\uffc2\001\002\000\006\027\142" +
    "\030\141\001\002\000\006\027\uffa5\030\uffa5\001\002\000" +
    "\032\024\064\026\061\033\050\040\062\041\057\042\063" +
    "\045\055\063\051\064\047\065\054\066\056\067\060\001" +
    "\002\000\052\024\uffa7\025\uffa7\027\uffa7\030\uffa7\031\uffa7" +
    "\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\043" +
    "\uffa7\044\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7" +
    "\053\uffa7\062\uffa7\001\002\000\006\027\uffa6\030\uffa6\001" +
    "\002\000\032\024\064\026\061\033\050\040\062\041\057" +
    "\042\063\045\055\063\051\064\047\065\054\066\056\067" +
    "\060\001\002\000\004\025\146\001\002\000\052\024\uffc1" +
    "\025\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\037\uffc1\043\uffc1\044\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\062\uffc1\001" +
    "\002\000\004\066\163\001\002\000\056\024\uffb9\025\uffb9" +
    "\026\160\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\043\uffb9\044\uffb9\046\uffb9" +
    "\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\062" +
    "\uffb9\001\002\000\032\024\064\026\061\033\050\040\062" +
    "\041\057\042\063\045\055\063\051\064\047\065\054\066" +
    "\056\067\060\001\002\000\032\024\064\026\061\033\050" +
    "\040\062\041\057\042\063\045\055\063\051\064\047\065" +
    "\054\066\056\067\060\001\002\000\006\025\156\030\155" +
    "\001\002\000\044\025\uffb5\030\uffb5\031\072\032\103\033" +
    "\071\034\077\035\101\036\104\037\074\043\107\044\100" +
    "\046\106\047\076\050\105\051\073\052\102\053\070\001" +
    "\002\000\032\024\064\026\061\033\050\040\062\041\057" +
    "\042\063\045\055\063\051\064\047\065\054\066\056\067" +
    "\060\001\002\000\054\024\uffb7\025\uffb7\027\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\043\uffb7\044\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\062\uffb7\001\002\000\044\025" +
    "\uffb6\030\uffb6\031\072\032\103\033\071\034\077\035\101" +
    "\036\104\037\074\043\107\044\100\046\106\047\076\050" +
    "\105\051\073\052\102\053\070\001\002\000\032\024\064" +
    "\026\061\033\050\040\062\041\057\042\063\045\055\063" +
    "\051\064\047\065\054\066\056\067\060\001\002\000\042" +
    "\027\162\031\072\032\103\033\071\034\077\035\101\036" +
    "\104\037\074\043\107\044\100\046\106\047\076\050\105" +
    "\051\073\052\102\053\070\001\002\000\064\016\uffab\017" +
    "\uffab\020\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037" +
    "\uffab\043\uffab\044\uffab\046\uffab\047\uffab\050\uffab\051\uffab" +
    "\052\uffab\053\uffab\054\uffab\062\uffab\001\002\000\054\024" +
    "\uffb8\025\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\043\uffb8\044\uffb8\046" +
    "\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8" +
    "\062\uffb8\001\002\000\052\024\uffbf\025\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\043\uffbf\044\uffbf\046\uffbf\047\uffbf\050\uffbf\051" +
    "\uffbf\052\uffbf\053\uffbf\062\uffbf\001\002\000\052\024\uffc4" +
    "\025\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\043\uffc4\044\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\062\uffc4\001" +
    "\002\000\006\023\uffb2\066\uffb2\001\002\000\004\027\170" +
    "\001\002\000\012\016\uffa9\017\uffa9\020\uffa9\026\uffa9\001" +
    "\002\000\006\023\uffb3\066\uffb3\001\002\000\012\016\043" +
    "\017\045\020\040\026\044\001\002\000\004\066\174\001" +
    "\002\000\010\025\uffd8\030\uffd8\062\uffd8\001\002\000\010" +
    "\025\uffd7\030\uffd7\062\uffd7\001\002\000\022\016\043\017" +
    "\045\020\040\021\211\026\044\055\212\060\214\066\204" +
    "\001\002\000\024\007\ufffa\016\043\017\045\020\040\021" +
    "\211\026\044\055\212\060\214\066\204\001\002\000\036" +
    "\005\ufff4\007\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021" +
    "\ufff4\026\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4" +
    "\066\ufff4\001\002\000\036\005\ufff8\007\ufff8\015\ufff8\016" +
    "\ufff8\017\ufff8\020\ufff8\021\ufff8\026\ufff8\055\ufff8\056\ufff8" +
    "\057\ufff8\060\ufff8\061\ufff8\066\ufff8\001\002\000\004\054" +
    "\277\001\002\000\036\005\ufff3\007\ufff3\015\ufff3\016\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\026\ufff3\055\ufff3\056\ufff3\057" +
    "\ufff3\060\ufff3\061\ufff3\066\ufff3\001\002\000\012\024\274" +
    "\026\151\031\147\054\uffba\001\002\000\004\062\273\001" +
    "\002\000\004\066\056\001\002\000\036\005\ufff2\007\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\026\ufff2\055" +
    "\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\066\ufff2\001\002" +
    "\000\004\062\267\001\002\000\004\066\241\001\002\000" +
    "\004\024\231\001\002\000\004\062\230\001\002\000\004" +
    "\024\217\001\002\000\004\062\216\001\002\000\036\005" +
    "\ufff6\007\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\026\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\066" +
    "\ufff6\001\002\000\032\024\064\026\061\033\050\040\062" +
    "\041\057\042\063\045\055\063\051\064\047\065\054\066" +
    "\056\067\060\001\002\000\042\025\221\031\072\032\103" +
    "\033\071\034\077\035\101\036\104\037\074\043\107\044" +
    "\100\046\106\047\076\050\105\051\073\052\102\053\070" +
    "\001\002\000\022\016\ufffb\017\ufffb\020\ufffb\021\ufffb\026" +
    "\ufffb\055\ufffb\060\ufffb\066\ufffb\001\002\000\022\016\043" +
    "\017\045\020\040\021\211\026\044\055\212\060\214\066" +
    "\204\001\002\000\004\061\224\001\002\000\036\005\uffe9" +
    "\007\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\026" +
    "\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\066\uffe9" +
    "\001\002\000\032\015\ufffa\016\043\017\045\020\040\021" +
    "\211\026\044\055\212\056\ufffa\057\ufffa\060\214\061\ufffa" +
    "\066\204\001\002\000\036\005\ufff9\007\ufff9\015\ufff9\016" +
    "\ufff9\017\ufff9\020\ufff9\021\ufff9\026\ufff9\055\ufff9\056\ufff9" +
    "\057\ufff9\060\ufff9\061\ufff9\066\ufff9\001\002\000\012\015" +
    "\ufffc\056\ufffc\057\ufffc\061\ufffc\001\002\000\036\005\ufff1" +
    "\007\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\026" +
    "\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\066\ufff1" +
    "\001\002\000\032\024\064\026\061\033\050\040\062\041" +
    "\057\042\063\045\055\063\051\064\047\065\054\066\056" +
    "\067\060\001\002\000\042\025\233\031\072\032\103\033" +
    "\071\034\077\035\101\036\104\037\074\043\107\044\100" +
    "\046\106\047\076\050\105\051\073\052\102\053\070\001" +
    "\002\000\022\016\ufffb\017\ufffb\020\ufffb\021\ufffb\026\ufffb" +
    "\055\ufffb\060\ufffb\066\ufffb\001\002\000\006\056\236\057" +
    "\235\001\002\000\036\005\uffeb\007\uffeb\015\uffeb\016\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\026\uffeb\055\uffeb\056\uffeb\057" +
    "\uffeb\060\uffeb\061\uffeb\066\uffeb\001\002\000\022\016\ufffb" +
    "\017\ufffb\020\ufffb\021\ufffb\026\ufffb\055\ufffb\060\ufffb\066" +
    "\ufffb\001\002\000\004\057\240\001\002\000\036\005\uffea" +
    "\007\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\026" +
    "\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea\066\uffea" +
    "\001\002\000\004\046\242\001\002\000\012\016\uffe3\017" +
    "\uffe3\020\uffe3\026\uffe3\001\002\000\012\016\043\017\045" +
    "\020\040\026\044\001\002\000\006\030\245\062\ufffa\001" +
    "\002\000\014\016\043\017\045\020\040\022\247\026\044" +
    "\001\002\000\004\062\uffef\001\002\000\004\066\252\001" +
    "\002\000\004\062\ufffa\001\002\000\004\062\uffee\001\002" +
    "\000\004\013\253\001\002\000\012\016\043\017\045\020" +
    "\040\026\044\001\002\000\004\023\255\001\002\000\032" +
    "\024\064\026\061\033\050\040\062\041\057\042\063\045" +
    "\055\063\051\064\047\065\054\066\056\067\060\001\002" +
    "\000\034\024\064\026\061\033\050\040\062\041\057\042" +
    "\063\045\055\062\uffae\063\051\064\047\065\054\066\056" +
    "\067\060\001\002\000\004\024\260\001\002\000\012\016" +
    "\043\017\045\020\040\026\044\001\002\000\006\025\262" +
    "\030\172\001\002\000\034\024\uffac\026\uffac\033\uffac\040" +
    "\uffac\041\uffac\042\uffac\045\uffac\062\uffac\063\uffac\064\uffac" +
    "\065\uffac\066\uffac\067\uffac\001\002\000\004\024\264\001" +
    "\002\000\012\016\043\017\045\020\040\026\044\001\002" +
    "\000\006\025\266\030\172\001\002\000\034\024\uffad\026" +
    "\uffad\033\uffad\040\uffad\041\uffad\042\uffad\045\uffad\062\uffad" +
    "\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad\001\002\000" +
    "\036\005\ufff5\007\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\026\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061" +
    "\ufff5\066\ufff5\001\002\000\006\054\271\062\ufff0\001\002" +
    "\000\032\024\064\026\061\033\050\040\062\041\057\042" +
    "\063\045\055\063\051\064\047\065\054\066\056\067\060" +
    "\001\002\000\042\031\072\032\103\033\071\034\077\035" +
    "\101\036\104\037\074\043\107\044\100\046\106\047\076" +
    "\050\105\051\073\052\102\053\070\062\uffed\001\002\000" +
    "\036\005\ufff7\007\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\026\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061" +
    "\ufff7\066\ufff7\001\002\000\032\024\064\026\061\033\050" +
    "\040\062\041\057\042\063\045\055\063\051\064\047\065" +
    "\054\066\056\067\060\001\002\000\006\025\276\030\155" +
    "\001\002\000\006\054\uffb7\062\uffe8\001\002\000\032\024" +
    "\064\026\061\033\050\040\062\041\057\042\063\045\055" +
    "\063\051\064\047\065\054\066\056\067\060\001\002\000" +
    "\042\031\072\032\103\033\071\034\077\035\101\036\104" +
    "\037\074\043\107\044\100\046\106\047\076\050\105\051" +
    "\073\052\102\053\070\062\uffec\001\002\000\004\007\302" +
    "\001\002\000\010\004\uffe5\006\uffe5\014\uffe5\001\002\000" +
    "\012\016\043\017\045\020\040\026\044\001\002\000\006" +
    "\025\uffd9\030\172\001\002\000\012\016\043\017\045\020" +
    "\040\026\044\001\002\000\010\025\uffda\030\172\062\uffda" +
    "\001\002\000\010\004\uffff\006\uffff\014\uffff\001\002\000" +
    "\022\016\ufffb\017\ufffb\020\ufffb\021\ufffb\026\ufffb\055\ufffb" +
    "\060\ufffb\066\ufffb\001\002\000\004\015\312\001\002\000" +
    "\004\002\001\001\002\000\004\066\314\001\002\000\004" +
    "\024\uffe3\001\002\000\004\024\316\001\002\000\012\016" +
    "\043\017\045\020\040\026\044\001\002\000\006\025\320" +
    "\030\172\001\002\000\022\016\043\017\045\020\040\021" +
    "\211\026\044\055\212\060\214\066\204\001\002\000\024" +
    "\005\ufffa\016\043\017\045\020\040\021\211\026\044\055" +
    "\212\060\214\066\204\001\002\000\004\005\323\001\002" +
    "\000\010\004\uffe4\006\uffe4\014\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\014\003\011\010\007\030\010\031\005\045" +
    "\004\001\001\000\004\023\312\001\001\000\010\010\306" +
    "\030\010\031\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\014\001\001\000\002\001" +
    "\001\000\012\032\020\033\024\034\023\035\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\027\035\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\031\001\001\000\002" +
    "\001\001\000\004\035\033\001\001\000\002\001\001\000" +
    "\014\023\045\024\035\036\036\040\040\041\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\170\001\001\000\004\023\165\001\001\000\002" +
    "\001\001\000\012\017\064\020\066\025\051\042\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\164\025\051\042\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\163\025\051\042\065\001\001\000\004\040" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\137\025\051\026\136\042\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\126\020\066\025\051" +
    "\042\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\125\020\066\025\051\042\065" +
    "\001\001\000\012\017\124\020\066\025\051\042\065\001" +
    "\001\000\012\017\123\020\066\025\051\042\065\001\001" +
    "\000\012\017\122\020\066\025\051\042\065\001\001\000" +
    "\012\017\121\020\066\025\051\042\065\001\001\000\002" +
    "\001\001\000\012\017\120\020\066\025\051\042\065\001" +
    "\001\000\012\017\117\020\066\025\051\042\065\001\001" +
    "\000\012\017\116\020\066\025\051\042\065\001\001\000" +
    "\012\017\115\020\066\025\051\042\065\001\001\000\012" +
    "\017\114\020\066\025\051\042\065\001\001\000\012\017" +
    "\113\020\066\025\051\042\065\001\001\000\012\017\112" +
    "\020\066\025\051\042\065\001\001\000\012\017\111\020" +
    "\066\025\051\042\065\001\001\000\012\017\110\020\066" +
    "\025\051\042\065\001\001\000\012\017\107\020\066\025" +
    "\051\042\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\131\025" +
    "\051\042\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\134\025\051\042\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\142\025\051\042\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\144\025\051\042\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\064\020\066\025\051" +
    "\042\065\001\001\000\014\017\153\020\066\025\051\027" +
    "\152\042\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\156\020\066\025\051\042\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\160\020\066" +
    "\025\051\042\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\023\045\024\172\040\040\041\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\005\176\006\200\007\204\011\214\012\207" +
    "\013\177\014\202\015\206\016\212\023\045\024\205\040" +
    "\040\041\041\042\201\001\001\000\036\006\225\007\204" +
    "\011\214\012\207\013\177\014\202\015\206\016\212\022" +
    "\300\023\045\024\205\040\040\041\041\042\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\147\001\001\000\002\001\001" +
    "\000\004\042\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\217\020\066\025\051\042\065\001\001\000\002" +
    "\001\001\000\006\004\222\021\221\001\001\000\036\005" +
    "\224\006\200\007\204\011\214\012\207\013\177\014\202" +
    "\015\206\016\212\023\045\024\205\040\040\041\041\042" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\006\225\007\204\011\214\012\207\013\177\014\202\015" +
    "\206\016\212\022\226\023\045\024\205\040\040\041\041" +
    "\042\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\231\020\066\025\051\042\065" +
    "\001\001\000\002\001\001\000\006\004\233\021\221\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\236" +
    "\021\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\242\001\001\000\014\023\045" +
    "\024\035\036\243\040\040\041\041\001\001\000\004\022" +
    "\245\001\001\000\014\023\045\024\172\040\040\041\041" +
    "\043\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\023\045\024\253\040\040\041\041\001\001\000" +
    "\002\001\001\000\012\020\256\025\051\042\065\044\255" +
    "\001\001\000\010\020\262\025\051\042\065\001\001\000" +
    "\002\001\001\000\014\023\045\024\035\036\260\040\040" +
    "\041\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\023\045\024\035\036\264\040\040" +
    "\041\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\271\020\066" +
    "\025\051\042\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\153\020\066\025\051\027\274\042\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\277\020\066\025\051\042\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\023\045\024" +
    "\035\036\303\040\040\041\041\001\001\000\002\001\001" +
    "\000\014\023\045\024\035\036\305\040\040\041\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\310" +
    "\021\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\314\001\001\000\002\001\001" +
    "\000\014\023\045\024\035\036\316\040\040\041\041\001" +
    "\001\000\002\001\001\000\036\005\320\006\200\007\204" +
    "\011\214\012\207\013\177\014\202\015\206\016\212\023" +
    "\045\024\205\040\040\041\041\042\201\001\001\000\036" +
    "\006\225\007\204\011\214\012\207\013\177\014\202\015" +
    "\206\016\212\022\321\023\045\024\205\040\040\041\041" +
    "\042\201\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    Bloque bloque = Misc.acumulador;	
	boolean noError = true;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Lelem ::= fact 
            {
              LinkedList RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	LinkedList<Expresion> L = new LinkedList<Expresion>();
			L.add(f);
			RESULT = L;
		
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Lelem*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Lelem ::= Lelem COMA fact 
            {
              LinkedList RESULT = null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList L = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			L.add(f);
			RESULT = L;
		
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Lelem*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // arreglo ::= ACORCH Lelem CCORCH 
            {
              LinkedList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arreglo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LCorch ::= ACORCH CCORCH 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*LCorch*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LCorch ::= LCorch ACORCH CCORCH 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*LCorch*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LCorchN ::= ACORCH expr CCORCH 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*LCorchN*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LCorchN ::= LCorchN ACORCH expr CCORCH 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*LCorchN*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lDiscr ::= fact APARENT LVar CPARENT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*lDiscr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lDiscr ::= lDiscr fact APARENT LVar CPARENT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*lDiscr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // discr ::= CASO ID DOSPUNTOS tipoG ES lDiscr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*discr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipo ::= DECLBOOL 
            {
              TipoF RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = TipoF.BOOL; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tipo ::= DECLREAL 
            {
              TipoF RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = TipoF.FLOAT; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tipo ::= DECLENTERO 
            {
              TipoF RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = TipoF.INT; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipoG ::= LCorch tipo 
            {
              TipoF RESULT = null;
		 RESULT = TipoF.ARRAY; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*tipoG*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tipoG ::= LCorchN tipo 
            {
              TipoF RESULT = null;
		 RESULT = TipoF.ARRAY; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*tipoG*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipoG ::= tipo 
            {
              TipoF RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TipoF t = (TipoF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*tipoG*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LParam ::= expr 
            {
              LinkedList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  LinkedList<Expresion> l = new LinkedList<Expresion>();
			l.add(e);
			RESULT = l;
		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*LParam*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LParam ::= LParam COMA expr 
            {
              LinkedList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  l.add(e);
			RESULT = l;
		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*LParam*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Var ::= ID APARENT LParam CPARENT 
            {
              TokenValue RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 	if (bloque.getTS().get(i.text) == null) {
				noError = noError & false;
				System.out.println("ERROR (linea "+(i.lineBegin+1)+
					") El subprograma '"+i.text+"' no ha sido definido.");
			}
			RESULT = i; 
		
              CUP$parser$result = new java_cup.runtime.Symbol(32/*Var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Var ::= ID PUNTO ID 
            {
              TokenValue RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*Var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Var ::= ID LCorchN 
            {
              TokenValue RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*Var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Var ::= ID 
            {
              TokenValue RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*Var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // fact ::= arreglo 
            {
              Expresion RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Arreglo(TipoF.ARRAY, 0, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // fact ::= FALSO 
            {
              Expresion RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new Factor(TipoF.BOOL, new Booleano(false)); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // fact ::= CIERTO 
            {
              Expresion RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new Factor(TipoF.BOOL, new Booleano(true)); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // fact ::= Var 
            {
              Expresion RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  Factor e = new Factor (TipoF.ID, i.text ); 
			noError = noError && e.esCorrecta(bloque, i.lineBegin+1); 
			RESULT = e;
		
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // fact ::= NOLOG fact 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprUna (OperadorU.NOT, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // fact ::= REDONDEO APARENT fact CPARENT 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new ExprUna (OperadorU.REDONDEO, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // fact ::= PISO APARENT fact CPARENT 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new ExprUna (OperadorU.PISO, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // fact ::= TECHO APARENT fact CPARENT 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new ExprUna (OperadorU.TECHO, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // fact ::= REAL 
            {
              Expresion RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Factor (TipoF.FLOAT, n); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // fact ::= MENOS fact 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprUna (OperadorU.MENOS, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // fact ::= ENTERO 
            {
              Expresion RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Factor (TipoF.INT, n); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // fact ::= APARENT expr CPARENT 
            {
              Expresion RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr PUNTO expr 
            {
              Expresion RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= fact 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = f; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr MOD expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.MOD ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr DIV expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.DIVE ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr POR expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.MULT ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr ENTRE expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.DIVR ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr MENOS expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.RESTA ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr MAS expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.SUMA ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr MENORIGUAL expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.MENORIGUAL ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr MAYORIGUAL expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.MAYORIGUAL ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr MENOR expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.MENOR ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr MAYOR expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.MAYOR ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr YLOG expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.AND, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr OLOG expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.OR, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr DIF expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.DESIGUAL, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr IGUAL expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.IGUAL, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LVar ::= tipoG ID 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TipoF t = (TipoF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	Informacion info = new Informacion(i.text, t, null, 0);
			bloque.getTS().add(i.text, info);
		
              CUP$parser$result = new java_cup.runtime.Symbol(28/*LVar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LVar ::= LVar COMA tipoG ID 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TipoF t = (TipoF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			Informacion info = new Informacion(i.text, t, null, 0);
			bloque.getTS().add(i.text, info);
		
              CUP$parser$result = new java_cup.runtime.Symbol(28/*LVar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ParamS ::= SALIDA DOSPUNTOS LVar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*ParamS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ParamES ::= ENTSAL DOSPUNTOS LVar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*ParamES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ParamE ::= ENTRADA DOSPUNTOS LVar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*ParamE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Param ::= ParamS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*Param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Param ::= ParamES 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*Param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Param ::= ParamE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*Param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Param ::= ParamE PYCOMA ParamES 
            {
              Object RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*Param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Param ::= ParamES PYCOMA ParamS 
            {
              Object RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*Param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Param ::= ParamE PYCOMA ParamS 
            {
              Object RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*Param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Param ::= ParamE PYCOMA ParamES PYCOMA ParamS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*Param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // iniBProc ::= 
            {
              Object RESULT = null;
		 	bloque = new Bloque(bloque, false); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*iniBProc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Func ::= FUNC tipo ID iniBProc APARENT LVar CPARENT lInst finB FINFUNC 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bloque l = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			if (bloque.getTS().get(i.text) != null) {
					Informacion info = bloque.getTS().get(i.text);
					InfoSub is = (InfoSub)info.valor;				
					is.setBloque(b);
					info.setValor(is);				
					bloque.getTS().add(i.text, info);
				}
			
              CUP$parser$result = new java_cup.runtime.Symbol(23/*Func*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Proc ::= PROC ID iniBProc APARENT Param CPARENT lInst finB FINPROC 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bloque l = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			if (bloque.getTS().get(i.text) != null) {
					Informacion info = bloque.getTS().get(i.text);
					InfoSub is = (InfoSub)info.valor;				
					is.setBloque(b);
					info.setValor(is);
					bloque.getTS().add(i.text, info);
				}
			
              CUP$parser$result = new java_cup.runtime.Symbol(22/*Proc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SubProg ::= Func 
            {
              Inst RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*SubProg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SubProg ::= Proc 
            {
              Inst RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*SubProg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // llamProc ::= ID APARENT LParam CPARENT 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			if (!bloque.getTS().isDefined(i.text)) {
				noError = noError & false;
				System.out.println("ERROR (linea "+(i.lineBegin+1)+
					") El subprograma '"+i.text+"' no ha sido definido.");
			} else				
				RESULT = new InstProc(i.text, l);
			
		
              CUP$parser$result = new java_cup.runtime.Symbol(12/*llamProc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // iHacer ::= HACER APARENT expr CPARENT bloq FINHACER 
            {
              Inst RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque l = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstDo(e, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*iHacer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // iSino ::= SI APARENT expr CPARENT bloq SINO bloq FINSI 
            {
              Inst RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Bloque l1 = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque l2 = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstIfElse(e, l1,l2); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*iSino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // iSi ::= SI APARENT expr CPARENT bloq FINSI 
            {
              Inst RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque l = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstIf(e, l ); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*iSi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // iAsig ::= Var ASIGNACION expr 
            {
              Inst RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TokenValue d = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	InstAsig i = new InstAsig(d.text , e); 
			Informacion info = new Informacion(d.text,TipoF.INT,e,0);			
			noError = noError && i.esCorrecta(bloque, info, d.lineBegin+1);
			RESULT = i; 
		
              CUP$parser$result = new java_cup.runtime.Symbol(8/*iAsig*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // iDeclA ::= tipoG Var ASIGNACION expr 
            {
              Inst RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TipoF t = (TipoF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  Decl inst = new Decl(t, i.text );	
			Informacion info = new Informacion(i.text,t,e,0);
			noError = noError && inst.esCorrecta(bloque, info, i.lineBegin+1);
			if (bloque.getTS().get(i.text) == null) 
				bloque.getTS().add(i.text,info);				
			InstAsig insta = new InstAsig(i.text, e); 					
			noError = noError && insta.esCorrecta(bloque, info, i.lineBegin+1);				
			RESULT = insta;        
        
              CUP$parser$result = new java_cup.runtime.Symbol(7/*iDeclA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Decl ::= TIPODATO ID IGUAL iniBProc LVar COMA discr finB 
            {
              Inst RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Decl ::= TIPODATO ID IGUAL iniBProc LVar finB 
            {
              Inst RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Decl ::= tipoG Var 
            {
              Inst RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TipoF t = (TipoF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  Decl inst = new Decl(t, i.text );	
			Informacion info = new Informacion(i.text,t,null, 0);
			if (t.equals(TipoF.INT)) 
				info.setValor(0);
			else if (t.equals(TipoF.FLOAT)) 
				info.setValor(0.0);
			else if (t.equals(TipoF.BOOL)) 
				info.setValor(new Booleano(false));
			noError = noError && inst.esCorrecta(bloque,info, i.lineBegin+1);			
			if (bloque.getTS().getLocally(i.text) == null) 
				bloque.getTS().add(i.text ,info);
            RESULT = null;
        
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inst ::= llamProc PYCOMA 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // inst ::= iHacer 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inst ::= iSino 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inst ::= iSi 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inst ::= iAsig PYCOMA 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inst ::= iDeclA PYCOMA 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inst ::= Decl PYCOMA 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lInst ::= inst 
            {
              Bloque RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 bloque.agregarInst(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*lInst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lInst ::= lInst inst 
            {
              Bloque RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 bloque.agregarInst(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*lInst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // finB ::= 
            {
              Bloque RESULT = null;
		 Bloque b = bloque; bloque = bloque.getParent(); RESULT = b; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*finB*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicB ::= 
            {
              Bloque RESULT = null;
		 bloque = new Bloque(bloque, true); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*inicB*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloq ::= inicB lInst finB 
            {
              Bloque RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = b; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*bloq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lSubProgs ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*lSubProgs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lSubProgs ::= SubProg 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*lSubProgs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lSubProgs ::= lSubProgs SubProg 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*lSubProgs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= lSubProgs COMIENZO bloq FIN 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 	if (noError)
				b.imprimirB(0);
			
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*inicio*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

