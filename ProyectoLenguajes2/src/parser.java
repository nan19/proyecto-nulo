
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun May 04 19:42:18 VET 2008
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Sun May 04 19:42:18 VET 2008
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\003\006\000\002\002\004\000\002\050" +
    "\004\000\002\050\003\000\002\050\002\000\002\004\005" +
    "\000\002\021\002\000\002\022\002\000\002\005\004\000" +
    "\002\005\003\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\004\000\002\007\004\000\002\011\006" +
    "\000\002\012\005\000\002\013\010\000\002\014\012\000" +
    "\002\015\010\000\002\016\006\000\002\010\003\000\002" +
    "\010\003\000\002\034\013\000\002\035\014\000\002\043" +
    "\002\000\002\036\007\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\037\005\000\002\040\005\000\002" +
    "\041\005\000\002\042\006\000\002\042\004\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\003\000\002\017\005\000\002\020\005" +
    "\000\002\020\003\000\002\020\004\000\002\020\003\000" +
    "\002\020\006\000\002\020\006\000\002\020\006\000\002" +
    "\020\004\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\046\003\000\002\046\004" +
    "\000\002\046\005\000\002\046\006\000\002\033\005\000" +
    "\002\033\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\025\005\000\002\026\005" +
    "\000\002\027\013\000\002\051\007\000\002\051\006\000" +
    "\002\044\006\000\002\044\005\000\002\045\005\000\002" +
    "\045\004\000\002\031\005\000\002\032\005\000\002\032" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\010\004\004\006\007\014\ufffd\001\002\000" +
    "\014\016\034\017\041\020\032\021\042\027\037\001\002" +
    "\000\010\004\004\006\007\014\301\001\002\000\010\004" +
    "\uffe8\006\uffe8\014\uffe8\001\002\000\004\067\014\001\002" +
    "\000\010\004\ufffe\006\ufffe\014\ufffe\001\002\000\010\004" +
    "\uffe9\006\uffe9\014\uffe9\001\002\000\004\002\013\001\002" +
    "\000\004\002\000\001\002\000\004\025\uffe5\001\002\000" +
    "\004\025\016\001\002\000\010\010\024\011\017\012\020" +
    "\001\002\000\004\013\276\001\002\000\004\013\274\001" +
    "\002\000\004\026\216\001\002\000\004\026\uffde\001\002" +
    "\000\006\026\uffe0\063\211\001\002\000\004\013\030\001" +
    "\002\000\006\026\uffdf\063\026\001\002\000\004\012\020" +
    "\001\002\000\004\026\uffe2\001\002\000\014\016\034\017" +
    "\041\020\032\021\042\027\037\001\002\000\010\026\uffdd" +
    "\031\077\063\uffdd\001\002\000\004\067\uffb0\001\002\000" +
    "\004\067\uffb6\001\002\000\004\067\uffb2\001\002\000\004" +
    "\067\uffb3\001\002\000\004\067\uffb4\001\002\000\004\030" +
    "\207\001\002\000\004\067\206\001\002\000\004\067\uffb1" +
    "\001\002\000\014\016\034\017\041\020\032\021\042\027" +
    "\037\001\002\000\004\067\uffb5\001\002\000\006\022\046" +
    "\031\045\001\002\000\016\016\034\017\041\020\032\021" +
    "\042\023\047\027\037\001\002\000\004\067\uffae\001\002" +
    "\000\014\016\034\017\041\020\032\021\042\027\037\001" +
    "\002\000\004\067\051\001\002\000\012\022\uffda\026\uffda" +
    "\031\uffda\063\uffda\001\002\000\004\067\053\001\002\000" +
    "\004\024\054\001\002\000\032\025\072\027\067\034\055" +
    "\041\070\042\065\043\071\046\063\064\057\065\056\066" +
    "\061\067\064\070\066\001\002\000\032\025\072\027\067" +
    "\034\055\041\070\042\065\043\071\046\063\064\057\065" +
    "\056\066\061\067\064\070\066\001\002\000\052\025\uffbe" +
    "\026\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\044\uffbe\045\uffbe\047\uffbe" +
    "\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\063\uffbe\001" +
    "\002\000\052\025\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\044" +
    "\uffbf\045\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\054\uffbf\063\uffbf\001\002\000\052\025\uffbd\026\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\037\uffbd\040\uffbd\044\uffbd\045\uffbd\047\uffbd\050\uffbd\051" +
    "\uffbd\052\uffbd\053\uffbd\054\uffbd\063\uffbd\001\002\000\052" +
    "\025\uffc7\026\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\044\uffc7\045\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\063" +
    "\uffc7\001\002\000\034\022\200\025\072\027\067\034\055" +
    "\041\070\042\065\043\071\046\063\064\057\065\056\066" +
    "\061\067\064\070\066\001\002\000\032\025\072\027\067" +
    "\034\055\041\070\042\065\043\071\046\063\064\057\065" +
    "\056\066\061\067\064\070\066\001\002\000\056\025\163" +
    "\026\uffbc\027\162\030\uffbc\031\uffbc\032\160\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\044\uffbc\045\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055" +
    "\uffbc\063\uffbc\001\002\000\004\025\155\001\002\000\052" +
    "\025\uffc5\026\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\044\uffc5\045\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\063" +
    "\uffc5\001\002\000\032\025\072\027\067\034\055\041\070" +
    "\042\065\043\071\046\063\064\057\065\056\066\061\067" +
    "\064\070\066\001\002\000\004\025\145\001\002\000\004" +
    "\025\142\001\002\000\032\025\072\027\067\034\055\041" +
    "\070\042\065\043\071\046\063\064\057\065\056\066\061" +
    "\067\064\070\066\001\002\000\004\025\075\001\002\000" +
    "\052\025\uffc0\026\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\044\uffc0\045" +
    "\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0" +
    "\063\uffc0\001\002\000\014\016\034\017\041\020\032\021" +
    "\042\027\037\001\002\000\006\026\100\031\077\001\002" +
    "\000\014\016\034\017\041\020\032\021\042\027\037\001" +
    "\002\000\034\022\uffab\025\uffab\027\uffab\034\uffab\041\uffab" +
    "\042\uffab\043\uffab\046\uffab\064\uffab\065\uffab\066\uffab\067" +
    "\uffab\070\uffab\001\002\000\042\026\122\032\105\033\114" +
    "\034\104\035\111\036\113\037\117\040\107\044\121\045" +
    "\110\047\120\050\112\051\116\052\106\053\115\054\103" +
    "\001\002\000\050\026\uffca\030\uffca\031\uffca\032\uffca\033" +
    "\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\044\uffca" +
    "\045\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054" +
    "\uffca\063\uffca\001\002\000\032\025\072\027\067\034\055" +
    "\041\070\042\065\043\071\046\063\064\057\065\056\066" +
    "\061\067\064\070\066\001\002\000\032\025\072\027\067" +
    "\034\055\041\070\042\065\043\071\046\063\064\057\065" +
    "\056\066\061\067\064\070\066\001\002\000\032\025\072" +
    "\027\067\034\055\041\070\042\065\043\071\046\063\064" +
    "\057\065\056\066\061\067\064\070\066\001\002\000\032" +
    "\025\072\027\067\034\055\041\070\042\065\043\071\046" +
    "\063\064\057\065\056\066\061\067\064\070\066\001\002" +
    "\000\032\025\072\027\067\034\055\041\070\042\065\043" +
    "\071\046\063\064\057\065\056\066\061\067\064\070\066" +
    "\001\002\000\032\025\072\027\067\034\055\041\070\042" +
    "\065\043\071\046\063\064\057\065\056\066\061\067\064" +
    "\070\066\001\002\000\032\025\072\027\067\034\055\041" +
    "\070\042\065\043\071\046\063\064\057\065\056\066\061" +
    "\067\064\070\066\001\002\000\032\025\072\027\067\034" +
    "\055\041\070\042\065\043\071\046\063\064\057\065\056" +
    "\066\061\067\064\070\066\001\002\000\032\025\072\027" +
    "\067\034\055\041\070\042\065\043\071\046\063\064\057" +
    "\065\056\066\061\067\064\070\066\001\002\000\032\025" +
    "\072\027\067\034\055\041\070\042\065\043\071\046\063" +
    "\064\057\065\056\066\061\067\064\070\066\001\002\000" +
    "\032\025\072\027\067\034\055\041\070\042\065\043\071" +
    "\046\063\064\057\065\056\066\061\067\064\070\066\001" +
    "\002\000\032\025\072\027\067\034\055\041\070\042\065" +
    "\043\071\046\063\064\057\065\056\066\061\067\064\070" +
    "\066\001\002\000\032\025\072\027\067\034\055\041\070" +
    "\042\065\043\071\046\063\064\057\065\056\066\061\067" +
    "\064\070\066\001\002\000\032\025\072\027\067\034\055" +
    "\041\070\042\065\043\071\046\063\064\057\065\056\066" +
    "\061\067\064\070\066\001\002\000\032\025\072\027\067" +
    "\034\055\041\070\042\065\043\071\046\063\064\057\065" +
    "\056\066\061\067\064\070\066\001\002\000\052\025\uffc8" +
    "\026\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\040\uffc8\044\uffc8\045\uffc8\047\uffc8" +
    "\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\063\uffc8\001" +
    "\002\000\050\026\uffd5\030\uffd5\031\uffd5\032\105\033\114" +
    "\034\104\035\111\036\113\037\117\040\107\044\uffd5\045" +
    "\uffd5\047\uffd5\050\uffd5\051\116\052\106\053\115\054\103" +
    "\063\uffd5\001\002\000\050\026\uffd8\030\uffd8\031\uffd8\032" +
    "\105\033\114\034\104\035\111\036\113\037\117\040\107" +
    "\044\121\045\110\047\uffd8\050\uffd8\051\116\052\106\053" +
    "\115\054\103\063\uffd8\001\002\000\050\026\uffcc\030\uffcc" +
    "\031\uffcc\032\105\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\044\uffcc\045\uffcc\047\uffcc\050\uffcc\051\uffcc" +
    "\052\uffcc\053\uffcc\054\uffcc\063\uffcc\001\002\000\050\026" +
    "\uffd4\030\uffd4\031\uffd4\032\105\033\114\034\104\035\111" +
    "\036\113\037\117\040\107\044\uffd4\045\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\063\uffd4\001\002" +
    "\000\050\026\uffd2\030\uffd2\031\uffd2\032\105\033\114\034" +
    "\104\035\111\036\113\037\117\040\107\044\uffd2\045\uffd2" +
    "\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\063" +
    "\uffd2\001\002\000\050\026\uffd0\030\uffd0\031\uffd0\032\105" +
    "\033\uffd0\034\uffd0\035\111\036\113\037\117\040\107\044" +
    "\uffd0\045\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0" +
    "\054\uffd0\063\uffd0\001\002\000\050\026\uffce\030\uffce\031" +
    "\uffce\032\105\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce" +
    "\040\uffce\044\uffce\045\uffce\047\uffce\050\uffce\051\uffce\052" +
    "\uffce\053\uffce\054\uffce\063\uffce\001\002\000\050\026\uffd7" +
    "\030\uffd7\031\uffd7\032\105\033\114\034\104\035\111\036" +
    "\113\037\117\040\107\044\121\045\110\047\uffd7\050\uffd7" +
    "\051\116\052\106\053\115\054\103\063\uffd7\001\002\000" +
    "\050\026\uffcd\030\uffcd\031\uffcd\032\105\033\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\040\uffcd\044\uffcd\045\uffcd\047" +
    "\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\063\uffcd" +
    "\001\002\000\050\026\uffd6\030\uffd6\031\uffd6\032\105\033" +
    "\114\034\104\035\111\036\113\037\117\040\107\044\121" +
    "\045\uffd6\047\uffd6\050\uffd6\051\116\052\106\053\115\054" +
    "\103\063\uffd6\001\002\000\050\026\uffcb\030\uffcb\031\uffcb" +
    "\032\105\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\044\uffcb\045\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\053\uffcb\054\uffcb\063\uffcb\001\002\000\050\026\uffd3\030" +
    "\uffd3\031\uffd3\032\105\033\114\034\104\035\111\036\113" +
    "\037\117\040\107\044\uffd3\045\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\053\uffd3\054\uffd3\063\uffd3\001\002\000\050" +
    "\026\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\044\uffc9\045\uffc9\047\uffc9" +
    "\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\063\uffc9\001" +
    "\002\000\050\026\uffcf\030\uffcf\031\uffcf\032\105\033\uffcf" +
    "\034\uffcf\035\111\036\113\037\117\040\107\044\uffcf\045" +
    "\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\063\uffcf\001\002\000\050\026\uffd1\030\uffd1\031\uffd1\032" +
    "\105\033\114\034\104\035\111\036\113\037\117\040\107" +
    "\044\uffd1\045\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053" +
    "\uffd1\054\uffd1\063\uffd1\001\002\000\032\025\072\027\067" +
    "\034\055\041\070\042\065\043\071\046\063\064\057\065" +
    "\056\066\061\067\064\070\066\001\002\000\004\026\144" +
    "\001\002\000\052\025\uffc2\026\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\044\uffc2\045\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053" +
    "\uffc2\054\uffc2\063\uffc2\001\002\000\032\025\072\027\067" +
    "\034\055\041\070\042\065\043\071\046\063\064\057\065" +
    "\056\066\061\067\064\070\066\001\002\000\004\026\147" +
    "\001\002\000\052\025\uffc4\026\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\044\uffc4\045\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\054\uffc4\063\uffc4\001\002\000\006\030\153\031\152" +
    "\001\002\000\006\030\uffa4\031\uffa4\001\002\000\032\025" +
    "\072\027\067\034\055\041\070\042\065\043\071\046\063" +
    "\064\057\065\056\066\061\067\064\070\066\001\002\000" +
    "\052\025\uffa6\026\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6" +
    "\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\044\uffa6\045" +
    "\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6" +
    "\063\uffa6\001\002\000\006\030\uffa5\031\uffa5\001\002\000" +
    "\032\025\072\027\067\034\055\041\070\042\065\043\071" +
    "\046\063\064\057\065\056\066\061\067\064\070\066\001" +
    "\002\000\004\026\157\001\002\000\052\025\uffc3\026\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\037\uffc3\040\uffc3\044\uffc3\045\uffc3\047\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\uffc3\063\uffc3\001\002\000" +
    "\004\067\176\001\002\000\056\025\uffbb\026\uffbb\027\173" +
    "\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\037\uffbb\040\uffbb\044\uffbb\045\uffbb\047\uffbb\050\uffbb" +
    "\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\063\uffbb\001" +
    "\002\000\032\025\072\027\067\034\055\041\070\042\065" +
    "\043\071\046\063\064\057\065\056\066\061\067\064\070" +
    "\066\001\002\000\032\025\072\027\067\034\055\041\070" +
    "\042\065\043\071\046\063\064\057\065\056\066\061\067" +
    "\064\070\066\001\002\000\006\026\167\031\166\001\002" +
    "\000\044\026\uffb7\031\uffb7\032\105\033\114\034\104\035" +
    "\111\036\113\037\117\040\107\044\121\045\110\047\120" +
    "\050\112\051\116\052\106\053\115\054\103\001\002\000" +
    "\032\025\072\027\067\034\055\041\070\042\065\043\071" +
    "\046\063\064\057\065\056\066\061\067\064\070\066\001" +
    "\002\000\054\025\uffb9\026\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\044" +
    "\uffb9\045\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\063\uffb9\001\002\000\044\026\uffb8\031" +
    "\uffb8\032\105\033\114\034\104\035\111\036\113\037\117" +
    "\040\107\044\121\045\110\047\120\050\112\051\116\052" +
    "\106\053\115\054\103\001\002\000\042\030\172\032\105" +
    "\033\114\034\104\035\111\036\113\037\117\040\107\044" +
    "\121\045\110\047\120\050\112\051\116\052\106\053\115" +
    "\054\103\001\002\000\056\025\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\040\uffa9\044\uffa9\045\uffa9\047\uffa9\050\uffa9\051" +
    "\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\063\uffa9\001\002" +
    "\000\032\025\072\027\067\034\055\041\070\042\065\043" +
    "\071\046\063\064\057\065\056\066\061\067\064\070\066" +
    "\001\002\000\042\030\175\032\105\033\114\034\104\035" +
    "\111\036\113\037\117\040\107\044\121\045\110\047\120" +
    "\050\112\051\116\052\106\053\115\054\103\001\002\000" +
    "\056\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa" +
    "\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\044" +
    "\uffaa\045\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa" +
    "\054\uffaa\055\uffaa\063\uffaa\001\002\000\054\025\uffba\026" +
    "\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba" +
    "\036\uffba\037\uffba\040\uffba\044\uffba\045\uffba\047\uffba\050" +
    "\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\063\uffba" +
    "\001\002\000\052\025\uffc1\026\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\044\uffc1\045\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053" +
    "\uffc1\054\uffc1\063\uffc1\001\002\000\004\067\uffad\001\002" +
    "\000\004\025\202\001\002\000\014\016\034\017\041\020" +
    "\032\021\042\027\037\001\002\000\006\026\204\031\077" +
    "\001\002\000\034\022\uffac\025\uffac\027\uffac\034\uffac\041" +
    "\uffac\042\uffac\043\uffac\046\uffac\064\uffac\065\uffac\066\uffac" +
    "\067\uffac\070\uffac\001\002\000\052\025\uffc6\026\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\037\uffc6\040\uffc6\044\uffc6\045\uffc6\047\uffc6\050\uffc6\051" +
    "\uffc6\052\uffc6\053\uffc6\054\uffc6\063\uffc6\001\002\000\012" +
    "\022\uffd9\026\uffd9\031\uffd9\063\uffd9\001\002\000\014\016" +
    "\034\017\041\020\032\021\042\027\037\001\002\000\004" +
    "\067\uffaf\001\002\000\006\011\017\012\020\001\002\000" +
    "\004\026\uffe3\001\002\000\006\026\uffe1\063\214\001\002" +
    "\000\004\012\020\001\002\000\004\026\uffe4\001\002\000" +
    "\022\016\034\017\041\020\032\021\042\027\037\056\231" +
    "\061\233\067\225\001\002\000\024\007\ufffa\016\034\017" +
    "\041\020\032\021\042\027\037\056\231\061\233\067\225" +
    "\001\002\000\036\005\ufff4\007\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\020\ufff4\021\ufff4\027\ufff4\056\ufff4\057\ufff4\060\ufff4" +
    "\061\ufff4\062\ufff4\067\ufff4\001\002\000\004\067\064\001" +
    "\002\000\004\055\265\001\002\000\036\005\ufff8\007\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\027\ufff8\056" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\067\ufff8\001\002" +
    "\000\036\005\ufff3\007\ufff3\015\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\027\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3" +
    "\062\ufff3\067\ufff3\001\002\000\012\025\262\027\162\032" +
    "\160\055\uffbc\001\002\000\004\063\261\001\002\000\036" +
    "\005\ufff2\007\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\027\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2" +
    "\067\ufff2\001\002\000\004\063\260\001\002\000\004\025" +
    "\250\001\002\000\004\063\247\001\002\000\004\025\236" +
    "\001\002\000\004\063\235\001\002\000\036\005\ufff6\007" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\027\ufff6" +
    "\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\067\ufff6\001" +
    "\002\000\032\025\072\027\067\034\055\041\070\042\065" +
    "\043\071\046\063\064\057\065\056\066\061\067\064\070" +
    "\066\001\002\000\042\026\240\032\105\033\114\034\104" +
    "\035\111\036\113\037\117\040\107\044\121\045\110\047" +
    "\120\050\112\051\116\052\106\053\115\054\103\001\002" +
    "\000\022\016\ufffb\017\ufffb\020\ufffb\021\ufffb\027\ufffb\056" +
    "\ufffb\061\ufffb\067\ufffb\001\002\000\022\016\034\017\041" +
    "\020\032\021\042\027\037\056\231\061\233\067\225\001" +
    "\002\000\004\062\243\001\002\000\036\005\uffeb\007\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\027\uffeb\056" +
    "\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\067\uffeb\001\002" +
    "\000\032\015\ufffa\016\034\017\041\020\032\021\042\027" +
    "\037\056\231\057\ufffa\060\ufffa\061\233\062\ufffa\067\225" +
    "\001\002\000\036\005\ufff9\007\ufff9\015\ufff9\016\ufff9\017" +
    "\ufff9\020\ufff9\021\ufff9\027\ufff9\056\ufff9\057\ufff9\060\ufff9" +
    "\061\ufff9\062\ufff9\067\ufff9\001\002\000\012\015\ufffc\057" +
    "\ufffc\060\ufffc\062\ufffc\001\002\000\036\005\ufff1\007\ufff1" +
    "\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\027\ufff1\056" +
    "\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\067\ufff1\001\002" +
    "\000\032\025\072\027\067\034\055\041\070\042\065\043" +
    "\071\046\063\064\057\065\056\066\061\067\064\070\066" +
    "\001\002\000\042\026\252\032\105\033\114\034\104\035" +
    "\111\036\113\037\117\040\107\044\121\045\110\047\120" +
    "\050\112\051\116\052\106\053\115\054\103\001\002\000" +
    "\022\016\ufffb\017\ufffb\020\ufffb\021\ufffb\027\ufffb\056\ufffb" +
    "\061\ufffb\067\ufffb\001\002\000\006\057\255\060\254\001" +
    "\002\000\036\005\uffed\007\uffed\015\uffed\016\uffed\017\uffed" +
    "\020\uffed\021\uffed\027\uffed\056\uffed\057\uffed\060\uffed\061" +
    "\uffed\062\uffed\067\uffed\001\002\000\022\016\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\027\ufffb\056\ufffb\061\ufffb\067\ufffb\001" +
    "\002\000\004\060\257\001\002\000\036\005\uffec\007\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\027\uffec\056" +
    "\uffec\057\uffec\060\uffec\061\uffec\062\uffec\067\uffec\001\002" +
    "\000\036\005\ufff5\007\ufff5\015\ufff5\016\ufff5\017\ufff5\020" +
    "\ufff5\021\ufff5\027\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5" +
    "\062\ufff5\067\ufff5\001\002\000\036\005\ufff7\007\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\027\ufff7\056\ufff7" +
    "\057\ufff7\060\ufff7\061\ufff7\062\ufff7\067\ufff7\001\002\000" +
    "\032\025\072\027\067\034\055\041\070\042\065\043\071" +
    "\046\063\064\057\065\056\066\061\067\064\070\066\001" +
    "\002\000\006\026\264\031\166\001\002\000\006\055\uffb9" +
    "\063\uffea\001\002\000\032\025\072\027\067\034\055\041" +
    "\070\042\065\043\071\046\063\064\057\065\056\066\061" +
    "\067\064\070\066\001\002\000\042\032\105\033\114\034" +
    "\104\035\111\036\113\037\117\040\107\044\121\045\110" +
    "\047\120\050\112\051\116\052\106\053\115\054\103\063" +
    "\uffee\001\002\000\006\055\270\063\ufff0\001\002\000\032" +
    "\025\072\027\067\034\055\041\070\042\065\043\071\046" +
    "\063\064\057\065\056\066\061\067\064\070\066\001\002" +
    "\000\042\032\105\033\114\034\104\035\111\036\113\037" +
    "\117\040\107\044\121\045\110\047\120\050\112\051\116" +
    "\052\106\053\115\054\103\063\uffef\001\002\000\004\007" +
    "\273\001\002\000\010\004\uffe7\006\uffe7\014\uffe7\001\002" +
    "\000\014\016\034\017\041\020\032\021\042\027\037\001" +
    "\002\000\006\026\uffdb\031\077\001\002\000\014\016\034" +
    "\017\041\020\032\021\042\027\037\001\002\000\010\026" +
    "\uffdc\031\077\063\uffdc\001\002\000\010\004\uffff\006\uffff" +
    "\014\uffff\001\002\000\022\016\ufffb\017\ufffb\020\ufffb\021" +
    "\ufffb\027\ufffb\056\ufffb\061\ufffb\067\ufffb\001\002\000\004" +
    "\015\303\001\002\000\004\002\001\001\002\000\004\067" +
    "\305\001\002\000\004\025\uffe5\001\002\000\004\025\307" +
    "\001\002\000\014\016\034\017\041\020\032\021\042\027" +
    "\037\001\002\000\006\026\311\031\077\001\002\000\022" +
    "\016\034\017\041\020\032\021\042\027\037\056\231\061" +
    "\233\067\225\001\002\000\024\005\ufffa\016\034\017\041" +
    "\020\032\021\042\027\037\056\231\061\233\067\225\001" +
    "\002\000\004\005\314\001\002\000\010\004\uffe6\006\uffe6" +
    "\014\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\014\003\011\010\007\034\010\035\005\050" +
    "\004\001\001\000\014\023\303\025\042\026\035\027\034" +
    "\030\032\001\001\000\010\010\277\034\010\035\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\014\001\001\000\002\001\001\000\012\036\020" +
    "\037\022\040\024\041\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\026\001\001\000\002\001\001\000\016\023\037\025\042" +
    "\026\035\027\034\030\032\042\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\023\037\025\042" +
    "\026\035\027\034\030\032\042\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\023\047\025\042\026\035" +
    "\027\034\030\032\001\001\000\002\001\001\000\014\023" +
    "\051\025\042\026\035\027\034\030\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\072\031\057\046\073\051\061\001\001" +
    "\000\010\020\204\031\057\046\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\200\031\057\046\073\001\001\000\010\020" +
    "\176\031\057\046\073\001\001\000\004\044\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\150\031" +
    "\057\032\147\046\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\100\020\101\031\057\046\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\023\037" +
    "\025\042\026\035\027\034\030\032\042\075\001\001\000" +
    "\002\001\001\000\014\023\047\025\042\026\035\027\034" +
    "\030\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\140\020\101\031\057\046\073" +
    "\001\001\000\012\017\137\020\101\031\057\046\073\001" +
    "\001\000\012\017\136\020\101\031\057\046\073\001\001" +
    "\000\012\017\135\020\101\031\057\046\073\001\001\000" +
    "\012\017\134\020\101\031\057\046\073\001\001\000\012" +
    "\017\133\020\101\031\057\046\073\001\001\000\012\017" +
    "\132\020\101\031\057\046\073\001\001\000\012\017\131" +
    "\020\101\031\057\046\073\001\001\000\012\017\130\020" +
    "\101\031\057\046\073\001\001\000\012\017\127\020\101" +
    "\031\057\046\073\001\001\000\012\017\126\020\101\031" +
    "\057\046\073\001\001\000\012\017\125\020\101\031\057" +
    "\046\073\001\001\000\012\017\124\020\101\031\057\046" +
    "\073\001\001\000\012\017\123\020\101\031\057\046\073" +
    "\001\001\000\012\017\122\020\101\031\057\046\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\142\031\057\046\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\145\031\057\046\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\153\031\057\046\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\020" +
    "\155\031\057\046\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\170\020\101\031\057\046\073\001\001\000\014\017\164" +
    "\020\101\031\057\033\163\046\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\167\020\101\031\057" +
    "\046\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\173\020\101" +
    "\031\057\046\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\023\037\025\042\026\035\027" +
    "\034\030\032\042\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\023" +
    "\207\025\042\026\035\027\034\030\032\001\001\000\002" +
    "\001\001\000\006\040\212\041\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\214\001\001\000\002" +
    "\001\001\000\040\005\216\006\222\007\225\011\233\012" +
    "\227\013\217\014\223\015\226\016\231\023\220\025\042" +
    "\026\035\027\034\030\032\046\221\001\001\000\040\006" +
    "\244\007\225\011\233\012\227\013\217\014\223\015\226" +
    "\016\231\022\271\023\220\025\042\026\035\027\034\030" +
    "\032\046\221\001\001\000\002\001\001\000\004\046\266" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\236\020\101\031\057\046\073\001\001\000" +
    "\002\001\001\000\006\004\241\021\240\001\001\000\040" +
    "\005\243\006\222\007\225\011\233\012\227\013\217\014" +
    "\223\015\226\016\231\023\220\025\042\026\035\027\034" +
    "\030\032\046\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\006\244\007\225\011\233\012\227\013\217" +
    "\014\223\015\226\016\231\022\245\023\220\025\042\026" +
    "\035\027\034\030\032\046\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\250\020" +
    "\101\031\057\046\073\001\001\000\002\001\001\000\006" +
    "\004\252\021\240\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\255\021\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\164\020\101\031\057\033\262\046\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\265\020" +
    "\101\031\057\046\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\270\020\101\031\057\046\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\023\037\025\042\026\035\027\034\030\032\042" +
    "\274\001\001\000\002\001\001\000\016\023\037\025\042" +
    "\026\035\027\034\030\032\042\276\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\301\021\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\305\001\001\000\002\001\001\000\016\023\037" +
    "\025\042\026\035\027\034\030\032\042\307\001\001\000" +
    "\002\001\001\000\040\005\311\006\222\007\225\011\233" +
    "\012\227\013\217\014\223\015\226\016\231\023\220\025" +
    "\042\026\035\027\034\030\032\046\221\001\001\000\040" +
    "\006\244\007\225\011\233\012\227\013\217\014\223\015" +
    "\226\016\231\022\312\023\220\025\042\026\035\027\034" +
    "\030\032\046\221\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    Bloque bloque = (Misc.acumulador != null)? Misc.acumulador : new Bloque();	
    boolean noError = true;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Lelem ::= fact 
            {
              LinkedList RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	LinkedList<Expresion> L = new LinkedList<Expresion>();
                        L.add(f);
                        RESULT = L;
                
              CUP$parser$result = new java_cup.runtime.Symbol(24/*Lelem*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Lelem ::= Lelem COMA fact 
            {
              LinkedList RESULT = null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList L = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			L.add(f);
                        RESULT = L;
                
              CUP$parser$result = new java_cup.runtime.Symbol(24/*Lelem*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // arreglo ::= ACORCH Lelem CCORCH 
            {
              LinkedList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*arreglo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LCorch ::= ACORCH CCORCH 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*LCorch*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LCorch ::= LCorch ACORCH CCORCH 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*LCorch*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LCorchN ::= ACORCH expr CCORCH 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*LCorchN*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LCorchN ::= LCorchN ACORCH expr CCORCH 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*LCorchN*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lDiscr ::= fact APARENT LVar CPARENT 
            {
              HashMap RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TablaSim ts = (TablaSim)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    HashMap<Object,TablaSim> hm = new HashMap<Object,TablaSim>();
                    hm.put(f,ts);
                    RESULT = hm;
                
              CUP$parser$result = new java_cup.runtime.Symbol(39/*lDiscr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lDiscr ::= lDiscr fact APARENT LVar CPARENT 
            {
              HashMap RESULT = null;
		int hmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap hm = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TablaSim ts = (TablaSim)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    if(!hm.containsKey(f)){
                        hm.put(f,ts);
                    }
                    RESULT = hm;
                
              CUP$parser$result = new java_cup.runtime.Symbol(39/*lDiscr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tipoVan ::= TIPODATO LVar COMA CASO tipo ID ES lDiscr FINT 
            {
              Tipo RESULT = null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		TablaSim ts = (TablaSim)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap hm = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    Informacion info = new Informacion(i.text, t, null, 0);
                    ts.add(i.text,info);
                    RESULT = new TVariante(ts,i.text, (HashMap<Object,TablaSim>)hm); 
                
              CUP$parser$result = new java_cup.runtime.Symbol(21/*tipoVan*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipoReg ::= TIPODATO LVar FINT 
            {
              Tipo RESULT = null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TablaSim ts = (TablaSim)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TRegistro(ts); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*tipoReg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipoArr ::= ACORCH CCORCH tipo 
            {
              Tipo RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TArreglo(t); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*tipoArr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tipoB ::= DECLBOOL 
            {
              TipoF RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = TipoF.BOOL; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*tipoB*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tipoB ::= DECLREAL 
            {
              TipoF RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = TipoF.FLOAT; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*tipoB*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipoB ::= DECLENTERO 
            {
              TipoF RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = TipoF.INT; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*tipoB*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tipo ::= tipoVan 
            {
              Tipo RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipo ::= tipoReg 
            {
              Tipo RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipo ::= tipoArr 
            {
              Tipo RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tipo ::= tipoB 
            {
              Tipo RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TipoF t = (TipoF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TBasico(t); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LParam ::= expr 
            {
              LinkedList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  LinkedList<Expresion> l = new LinkedList<Expresion>();
			l.add(e);
			RESULT = l;
		
              CUP$parser$result = new java_cup.runtime.Symbol(25/*LParam*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LParam ::= LParam COMA expr 
            {
              LinkedList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  l.add(e);
			RESULT = l;
		
              CUP$parser$result = new java_cup.runtime.Symbol(25/*LParam*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Var ::= ID APARENT LParam CPARENT 
            {
              TokenValue RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 	if (bloque.getTS().get(i.text) == null) {
				noError = noError & false;
				System.out.println("ERROR (linea "+(i.lineBegin+1)+
					") El subprograma '"+i.text+"' no ha sido definido.");
			}
			RESULT = i; 
		
              CUP$parser$result = new java_cup.runtime.Symbol(36/*Var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Var ::= ID PUNTO ID 
            {
              TokenValue RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*Var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Var ::= ID LCorchN 
            {
              TokenValue RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*Var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Var ::= ID 
            {
              TokenValue RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*Var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // fact ::= arreglo 
            {
              Expresion RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Arreglo(TipoF.ARRAY, 0, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // fact ::= FALSO 
            {
              Expresion RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new Factor(TipoF.BOOL, new Booleano(false)); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // fact ::= CIERTO 
            {
              Expresion RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new Factor(TipoF.BOOL, new Booleano(true)); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // fact ::= Var 
            {
              Expresion RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  Factor e = new Factor (TipoF.ID, i.text ); 
			noError = noError && e.esCorrecta(bloque, i.lineBegin+1); 
			RESULT = e;
		
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // fact ::= NOLOG fact 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprUna (OperadorU.NOT, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // fact ::= REDONDEO APARENT fact CPARENT 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new ExprUna (OperadorU.REDONDEO, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // fact ::= PISO APARENT fact CPARENT 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new ExprUna (OperadorU.PISO, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // fact ::= TECHO APARENT fact CPARENT 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new ExprUna (OperadorU.TECHO, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // fact ::= REAL 
            {
              Expresion RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Factor (TipoF.FLOAT, n); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // fact ::= MENOS fact 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprUna (OperadorU.MENOS, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // fact ::= ENTERO 
            {
              Expresion RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Factor (TipoF.INT, n); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // fact ::= APARENT expr CPARENT 
            {
              Expresion RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr PUNTO expr 
            {
              Expresion RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= fact 
            {
              Expresion RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = f; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr MOD expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.MOD ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr DIV expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.DIVE ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr POR expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.MULT ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr ENTRE expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.DIVR ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr MENOS expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.RESTA ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr MAS expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.SUMA ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr MENORIGUAL expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.MENORIGUAL ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr MAYORIGUAL expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.MAYORIGUAL ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr MENOR expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.MENOR ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr MAYOR expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.MAYOR ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr YLOG expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.AND, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr OLOG expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.OR, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr DIF expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.DESIGUAL, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr IGUAL expr 
            {
              Expresion RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ExprBin(e1, OperadorB.IGUAL, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LVar ::= tipo ID 
            {
              TablaSim RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	
                        Informacion info = new Informacion(i.text, t, null, 0);
                        TablaSim ts = new TablaSim(null);
                        ts.add(i.text, info);
                        RESULT = ts;    
                            //bloque.getTS().add(i.text, info);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(32/*LVar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LVar ::= LVar COMA tipo ID 
            {
              TablaSim RESULT = null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TablaSim ts = (TablaSim)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			Informacion info = new Informacion(i.text, t, null, 0);
                        ts.add(i.text, info);
                        RESULT = ts;
			//bloque.getTS().add(i.text, info);
                        
                    
              CUP$parser$result = new java_cup.runtime.Symbol(32/*LVar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ParamS ::= SALIDA DOSPUNTOS LVar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*ParamS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ParamES ::= ENTSAL DOSPUNTOS LVar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*ParamES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ParamE ::= ENTRADA DOSPUNTOS LVar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*ParamE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Param ::= ParamS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*Param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Param ::= ParamES 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*Param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Param ::= ParamE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*Param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Param ::= ParamE PYCOMA ParamES 
            {
              Object RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*Param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Param ::= ParamES PYCOMA ParamS 
            {
              Object RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*Param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Param ::= ParamE PYCOMA ParamS 
            {
              Object RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*Param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Param ::= ParamE PYCOMA ParamES PYCOMA ParamS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*Param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // iniBProc ::= 
            {
              Object RESULT = null;
		 	bloque = new Bloque(bloque, false); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*iniBProc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Func ::= FUNC tipo ID iniBProc APARENT LVar CPARENT lInst finB FINFUNC 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bloque l = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			if (bloque.getTS().get(i.text) != null) {
					Informacion info = bloque.getTS().get(i.text);
					InfoSub is = (InfoSub)info.valor;				
					is.setBloque(b);
					info.setValor(is);				
					bloque.getTS().add(i.text, info);
				}
			
              CUP$parser$result = new java_cup.runtime.Symbol(27/*Func*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Proc ::= PROC ID iniBProc APARENT Param CPARENT lInst finB FINPROC 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bloque l = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			if (bloque.getTS().get(i.text) != null) {
					Informacion info = bloque.getTS().get(i.text);
					InfoSub is = (InfoSub)info.valor;				
					is.setBloque(b);
					info.setValor(is);
					bloque.getTS().add(i.text, info);
				}
			
              CUP$parser$result = new java_cup.runtime.Symbol(26/*Proc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SubProg ::= Func 
            {
              Inst RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*SubProg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SubProg ::= Proc 
            {
              Inst RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*SubProg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // llamProc ::= ID APARENT LParam CPARENT 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			if (!bloque.getTS().isDefined(i.text)) {
				noError = noError & false;
				System.out.println("ERROR (linea "+(i.lineBegin+1)+
					") El subprograma '"+i.text+"' no ha sido definido.");
			} else				
				RESULT = new InstProc(i.text, l);
			
		
              CUP$parser$result = new java_cup.runtime.Symbol(12/*llamProc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // iHacer ::= HACER APARENT expr CPARENT bloq FINHACER 
            {
              Inst RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque l = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstDo(e, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*iHacer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // iSino ::= SI APARENT expr CPARENT bloq SINO bloq FINSI 
            {
              Inst RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Bloque l1 = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque l2 = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstIfElse(e, l1,l2); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*iSino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // iSi ::= SI APARENT expr CPARENT bloq FINSI 
            {
              Inst RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque l = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstIf(e, l ); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*iSi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // iAsig ::= Var ASIGNACION expr 
            {
              Inst RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TokenValue d = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	InstAsig i = new InstAsig(d.text , e); 
                Informacion info = new Informacion(d.text,TipoF.INT,e,0);			
                noError = noError && i.esCorrecta(bloque, info, d.lineBegin+1);
                RESULT = i; 
        
              CUP$parser$result = new java_cup.runtime.Symbol(8/*iAsig*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // iDeclA ::= tipo Var ASIGNACION expr 
            {
              Inst RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  Decl inst = new Decl(t, i.text );	
			Informacion info = new Informacion(i.text,t,e,0);
			noError = noError && inst.esCorrecta(bloque, info, i.lineBegin+1);
			if (bloque.getTS().get(i.text) == null){
                            bloque.getTS().add(i.text,info);
                        }
			InstAsig insta = new InstAsig(i.text, e); 					
			noError = noError && insta.esCorrecta(bloque, info, i.lineBegin+1);				
			RESULT = insta;        
        
              CUP$parser$result = new java_cup.runtime.Symbol(7/*iDeclA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Decl ::= tipo Var 
            {
              Inst RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  Decl inst = new Decl(t, i.text );	
			Informacion info = new Informacion(i.text,t,null, 0);
			if (t.equals(TipoF.INT)) 
				info.setValor(0);
			else if (t.equals(TipoF.FLOAT)) 
				info.setValor(0.0);
			else if (t.equals(TipoF.BOOL)) 
				info.setValor(new Booleano(false));
			noError = noError && inst.esCorrecta(bloque,info, i.lineBegin+1);			
			if (bloque.getTS().getLocally(i.text) == null) 
				bloque.getTS().add(i.text ,info);
                    RESULT = null;
                
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inst ::= llamProc PYCOMA 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // inst ::= iHacer 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inst ::= iSino 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inst ::= iSi 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inst ::= iAsig PYCOMA 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inst ::= iDeclA PYCOMA 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inst ::= Decl PYCOMA 
            {
              Inst RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lInst ::= inst 
            {
              Bloque RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 bloque.agregarInst(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*lInst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lInst ::= lInst inst 
            {
              Bloque RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 bloque.agregarInst(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*lInst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // finB ::= 
            {
              Bloque RESULT = null;
		 Bloque b = bloque; bloque = bloque.getParent(); RESULT = b; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*finB*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicB ::= 
            {
              Bloque RESULT = null;
		 bloque = new Bloque(bloque, true); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*inicB*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloq ::= inicB lInst finB 
            {
              Bloque RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = b; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*bloq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lSubProgs ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*lSubProgs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lSubProgs ::= SubProg 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*lSubProgs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lSubProgs ::= lSubProgs SubProg 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*lSubProgs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= lSubProgs COMIENZO bloq FIN 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 	if (noError)
				b.imprimirB(0);
			
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*inicio*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

