import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import java.io.*;

/**
 * Universidad Simon Bolivar
 * Lenguajes de Programacion II
 * Entrega final 7/04/2008
 * 
 * Maria Sol Ferrer 04-36975
 * Jamil Navarro 04-37334
 *
 * Proyecto: Procesador de lenguaje imperativo.
 * PreLeng2.cup: Analizador sintactico previo que reconoce 
 * subprogramas y los agrega a la Tabla de Simbolos
 * 
 */
action code {:
    TipoES es;
    Bloque bloque;
    boolean error = false;
    HashMap<String,TablaSim> discGlob;
:}

/**
 * Definicion de los tokens generados por el escaner
 * con el tipo asociado.
 */
terminal TokenValue FUNC;
terminal TokenValue FINFUNC;
terminal TokenValue PROC;
terminal TokenValue FINPROC;
terminal TokenValue ENTRADA;
terminal TokenValue ENTSAL;
terminal TokenValue SALIDA;
terminal TokenValue DOSPUNTOS;
terminal TokenValue COMIENZO;
terminal TokenValue FIN;
terminal TokenValue DECLENTERO;
terminal TokenValue DECLREAL;
terminal TokenValue DECLBOOL;
terminal TokenValue TIPODATO;
terminal TokenValue FINT;
terminal TokenValue REGISTRO;
terminal TokenValue FINREG;
terminal TokenValue CASO;
terminal TokenValue ES;
terminal TokenValue APARENT;
terminal TokenValue CPARENT;
terminal TokenValue ACORCH;
terminal TokenValue CCORCH;  
terminal TokenValue COMA;  
terminal TokenValue PUNTO;  
terminal OperadorB MAS;
terminal OperadorB MENOS;
terminal OperadorB POR;
terminal OperadorB ENTRE;
terminal OperadorB DIV;
terminal OperadorB MOD; 
terminal OperadorU TECHO;
terminal OperadorU PISO;
terminal OperadorU REDONDEO;
terminal OperadorB YLOG;
terminal OperadorB OLOG;
terminal OperadorU NOLOG;
terminal OperadorB IGUAL;
terminal OperadorB DIF;
terminal OperadorB MAYOR;
terminal OperadorB MENOR;
terminal OperadorB MAYORIGUAL;
terminal OperadorB MENORIGUAL;
terminal TokenValue ASIGNACION; 
terminal TokenValue SI;
terminal TokenValue SINO;
terminal TokenValue FINSI;
terminal TokenValue HACER;
terminal TokenValue FINHACER;
terminal TokenValue PYCOMA;
terminal TokenValue CIERTO;
terminal TokenValue FALSO;
		
terminal Integer ENTERO;
terminal TokenValue ID;
terminal Float REAL;
/**
 * Definicion de los simbolos no terminales de la
 * gramatica con el tipo de su atributo asociado.
 */
non terminal inicio;
non terminal Tipo tipo;
non terminal TipoF tipoB;
non terminal TablaSim LC;
non terminal LSubProg;
non terminal SubProg;
non terminal Proc;
non terminal Func;
non terminal List Param;
non terminal List ParamE;
non terminal List ParamES;
non terminal List ParamS;
non terminal LinkedList LVar;
non terminal Metodo Metodo;
non terminal Object fact;
non terminal HashMap lDiscr;
non terminal inicializar;
non terminal loquesea;
non terminal todo;
non terminal lInst;
non terminal inst;
non terminal Decl;
non terminal iDeclA;
non terminal iAsig;
non terminal iSi;
non terminal iSino;
non terminal iHacer;
non terminal iLlamada;
non terminal iDefTipo;
non terminal expr;
non terminal LVal;
non terminal LParam;
non terminal arreglo;
non terminal tipoVan;
non terminal Lelem;


/**
  * Orden de Precedencia.
  */
precedence left IGUAL, DIF;
precedence left OLOG;
precedence left YLOG;
precedence left MAYOR, MENOR, MAYORIGUAL, MENORIGUAL;
precedence left MAS, MENOS;
precedence left POR, ENTRE, DIV, MOD;

/**
 * Gramatica del lenguaje.
 */
inicio	::= inicializar LSubProg COMIENZO lInst FIN
        ;
		
inicializar ::= {: Misc.acumulador = new Bloque(100); bloque = Misc.acumulador; :}
            ;

/** Lista de Instrucciones */
lInst	::= lInst inst:i
        |   inst:i
        ;
		
/** Tipos de Instrucciones */		
inst	::= Decl:i	PYCOMA  	
        |   iDeclA:i	PYCOMA  
        |   iAsig:i     PYCOMA  
        |   iSi:i               
        |   iSino:i             
        |   iHacer:i            
        |   iLlamada:i	PYCOMA  
		|	iDefTipo			
        ;

/** Declaracion */
Decl	::= tipo:t ID:i		
        ;

/** Declaracion con Asignacion*/
iDeclA	::= tipo:t ID:i ASIGNACION:a expr:e		
        ;
/** Instruccion de Asignacion */
iAsig	::= LVal:d ASIGNACION:a expr:e
        ;
/** Instruccion Condicional */		
iSi		::= SI APARENT expr:e CPARENT lInst:l FINSI
        ;
/** Instruccion Condicional con flujo alterno */		
iSino 	::= SI APARENT expr:e CPARENT lInst:l1 SINO lInst:l2 FINSI
        ;
/** Instruccion de Iteracion */		
iHacer	::= HACER APARENT expr:e CPARENT lInst:l FINHACER
        ;
/** Instruccion de llamada a un procedimiento */	
iLlamada::=	ID:i APARENT LParam:l CPARENT
		;

/** Instruccion de definicion de nuevo tipo */
iDefTipo::=	TIPODATO ID:i IGUAL tipo:t FINT
		;

LSubProg::=	SubProg LSubProg
			|
			;
			
SubProg	::=	Proc
        |	Func
        ;
		
Proc	::= PROC ID:i APARENT LVar:ps CPARENT lInst FINPROC
			{:	
				
				if( bloque.getTS().isDefined(i.text)){
				    bloque.getTS().get(i.text).setStatus(1);
					System.out.println("ERROR (linea "+(i.lineBegin+1)+
					") El subprograma '"+i.text+"' ya esta definido.");
				}else{
					InfoSub is = new InfoSub(i.text,null,null,ps, TipoF.PROC, null);
					Informacion info = new Informacion(i.text, TipoF.PROC, is, 0);
					bloque.getTS().add(i.text, info);
				}		
				
			:}
		;
				
Func	::= FUNC tipo:t ID:i APARENT LVar:ps CPARENT lInst FINFUNC
			{:	
				if( bloque.getTS().isDefined(i.text)){
					bloque.getTS().get(i.text).setStatus(1);
				}else{
					InfoSub is = new InfoSub(i.text,null, null, ps, TipoF.FUNC, t);
					Informacion info = new Informacion(i.text, TipoF.FUNC, is, 0);
					bloque.getTS().add(i.text, info);
				}
			:}
		;

LVar	::=	LVar:ps COMA tipo:t ID:i DOSPUNTOS Metodo:m
		{:	
			Param p = new Param (i.text, t, m);
			ps.add(p);
			RESULT = ps;
		:}
		|	tipo:t ID:i DOSPUNTOS Metodo:m
		{: 	
			Param p = new Param(i.text,t,m);
			LinkedList<Param> ps = new LinkedList<Param>();
			ps.add(p);
			RESULT = ps;
        :}
		;

Metodo	::=	ENTRADA		{: RESULT = Metodo.E; :}
		|	SALIDA		{: RESULT = Metodo.S; :}
		|	ENTSAL		{: RESULT = Metodo.ES; :}
		;
		
/** Definicion de Expresion */	
expr	::= expr:e1 IGUAL expr:e2		
        |   expr:e1 DIF expr:e2
        |   expr:e1 OLOG expr:e2
        |   expr:e1 YLOG expr:e2
        |   expr:e1 MAYOR expr:e2
        |   expr:e1 MENOR expr:e2
        |   expr:e1 MAYORIGUAL expr:e2
        |   expr:e1 MENORIGUAL expr:e2
        |   expr:e1 MAS expr:e2
        |   expr:e1 MENOS expr:e2
        |   expr:e1 ENTRE expr:e2
        |   expr:e1 POR expr:e2
        |   expr:e1 DIV expr:e2
        |   expr:e1 MOD expr:e2
        |   fact:f
        |   expr:e PUNTO expr   
        ;
/** Definicion de Factor */		
fact	::= APARENT expr:e CPARENT 
        |   ENTERO:n 
        |   MENOS fact:f 
        |   REAL:n 
        |   TECHO APARENT fact:f CPARENT
        |   PISO APARENT fact:f CPARENT
        |   REDONDEO APARENT fact:f CPARENT
        |   NOLOG fact:f
        |   LVal:i
        |   CIERTO:c 
        |   FALSO:c 
        |   arreglo:l
		|	iLlamada:i
        ;

LVal	::=	LVal:l ACORCH expr:e CCORCH 
		|	LVal:l PUNTO ID:i
		|	ID:i
		;
		
/** Lista de parametros que se pasan al llamar a un subprograma */
LParam	::=	LParam:l COMA expr:e
		|	expr:e
		;

/** Tipos de Datos */		
tipo    ::= tipoB:t     
			{: RESULT = new TBasico(t); :}
        |   ACORCH ENTERO:i CCORCH tipo:t   
			{: RESULT = new TArreglo(t,i); :}
        |   ACORCH CCORCH tipo:t   
			{: RESULT = new TArreglo(t,-1); :}
        |   REGISTRO LC:ts FINREG
			{: RESULT = new TRegistro(ts); :}
		|	REGISTRO LC:ts COMA CASO tipo:t ID:i ES lDiscr:hm FINREG
			{: 
				Informacion info = new Informacion(i.text, t, null, 0);
				ts.add(i.text,info);
				RESULT = new TVariante(ts,i.text, (HashMap<Object,TablaSim>)hm); 
			:}
		|	ID:i
			{: //chequear en TS y obtener arbol de tipo
			
			:}
        ;

/* Tipos Basicos */
tipoB   ::= DECLENTERO:t    {: RESULT = TipoF.INT; :}
        |   DECLREAL:t      {: RESULT = TipoF.FLOAT;  :}
        |   DECLBOOL:t      {: RESULT = TipoF.BOOL; :} 
        ;

LC		::=	tipo:t ID:i				
		{: 	TablaSim ts = new TablaSim();
			Informacion info = new Informacion(i.text, t, null,0);	
			ts.add(i.text,info);
			RESULT = ts; 
		:}
		|	LC:ts COMA tipo:t ID:i	
		{: 	Informacion info = new Informacion(i.text, t, null,0);		
			ts.add(i.text,info);
			RESULT = ts; 
		:}
        ;

/** Definicion de casos del discriminante */
lDiscr	::= lDiscr:hm fact:f APARENT LC:ts CPARENT
			{: 
				if(!hm.containsKey(f)){
					hm.put(f,ts);
				}
				RESULT = hm;
			:}
        |   fact:f APARENT LC:ts CPARENT
			{:
				HashMap<Object,TablaSim> hm = new HashMap<Object,TablaSim>();
				hm.put(f,ts);
				RESULT = hm;
			:}
        ;

/** Contenido de un arreglo */	
arreglo	::= ACORCH Lelem:l CCORCH
		;

/** Lista de elementos */			
Lelem	::= Lelem:L COMA fact:f
            |	fact:f
            ;