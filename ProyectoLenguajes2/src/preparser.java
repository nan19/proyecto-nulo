
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Jun 02 18:12:39 CDT 2008
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Mon Jun 02 18:12:39 CDT 2008
  */
public class preparser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public preparser() {super();}

  /** Constructor which sets the default scanner. */
  public preparser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\003\007\000\002\002\004\000\002\023" +
    "\002\000\002\026\004\000\002\026\003\000\002\027\004" +
    "\000\002\027\004\000\002\027\004\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\004\000\002" +
    "\027\003\000\002\030\004\000\002\031\006\000\002\032" +
    "\005\000\002\033\010\000\002\034\012\000\002\035\010" +
    "\000\002\036\006\000\002\037\007\000\002\007\004\000" +
    "\002\007\002\000\002\010\003\000\002\010\003\000\002" +
    "\011\011\000\002\012\012\000\002\017\010\000\002\017" +
    "\006\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\040\005\000\002\040\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\005\000\002\040\005\000\002\040\005\000\002\040" +
    "\005\000\002\040\005\000\002\040\005\000\002\040\005" +
    "\000\002\040\005\000\002\040\003\000\002\040\005\000" +
    "\002\021\005\000\002\021\003\000\002\021\004\000\002" +
    "\021\003\000\002\021\006\000\002\021\006\000\002\021" +
    "\006\000\002\021\004\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\041\006\000\002\041\005\000\002\041\003\000\002" +
    "\042\005\000\002\042\003\000\002\004\003\000\002\004" +
    "\006\000\002\004\005\000\002\004\005\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\004\000\002\006\006\000\002\043\005\000\002" +
    "\045\005\000\002\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\010\004\uffff\006\uffff\014\uffff\001\002\000" +
    "\010\004\007\006\012\014\uffeb\001\002\000\004\002\006" +
    "\001\002\000\004\002\000\001\002\000\016\016\023\017" +
    "\027\020\021\023\030\031\025\071\024\001\002\000\004" +
    "\014\250\001\002\000\010\004\uffe9\006\uffe9\014\uffe9\001" +
    "\002\000\004\071\016\001\002\000\010\004\007\006\012" +
    "\014\uffeb\001\002\000\010\004\uffea\006\uffea\014\uffea\001" +
    "\002\000\004\014\uffec\001\002\000\004\027\017\001\002" +
    "\000\016\016\023\017\027\020\021\023\030\031\025\071" +
    "\024\001\002\000\006\030\054\033\053\001\002\000\006" +
    "\022\uffb8\071\uffb8\001\002\000\006\022\uffbf\071\uffbf\001" +
    "\002\000\006\022\uffba\071\uffba\001\002\000\006\022\uffbb" +
    "\071\uffbb\001\002\000\006\032\046\070\047\001\002\000" +
    "\004\071\040\001\002\000\006\022\uffb9\071\uffb9\001\002" +
    "\000\016\016\023\017\027\020\021\023\030\031\025\071" +
    "\024\001\002\000\006\024\035\033\034\001\002\000\004" +
    "\071\033\001\002\000\006\024\uffb7\033\uffb7\001\002\000" +
    "\016\016\023\017\027\020\021\023\030\031\025\071\024" +
    "\001\002\000\006\022\uffbc\071\uffbc\001\002\000\004\071" +
    "\037\001\002\000\006\024\uffb6\033\uffb6\001\002\000\004" +
    "\013\041\001\002\000\010\010\045\011\042\012\043\001" +
    "\002\000\006\030\uffe2\033\uffe2\001\002\000\006\030\uffe3" +
    "\033\uffe3\001\002\000\006\030\uffe5\033\uffe5\001\002\000" +
    "\006\030\uffe4\033\uffe4\001\002\000\016\016\023\017\027" +
    "\020\021\023\030\031\025\071\024\001\002\000\004\032" +
    "\050\001\002\000\016\016\023\017\027\020\021\023\030" +
    "\031\025\071\024\001\002\000\006\022\uffbe\071\uffbe\001" +
    "\002\000\006\022\uffbd\071\uffbd\001\002\000\016\016\023" +
    "\017\027\020\021\023\030\031\025\071\024\001\002\000" +
    "\024\016\023\017\027\020\021\021\070\023\030\031\025" +
    "\060\072\063\073\071\062\001\002\000\026\007\243\016" +
    "\023\017\027\020\021\021\070\023\030\031\025\060\072" +
    "\063\073\071\062\001\002\000\040\005\ufff9\007\ufff9\015" +
    "\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\023\ufff9\031\ufff9" +
    "\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\071\ufff9\001" +
    "\002\000\004\071\240\001\002\000\040\005\ufffd\007\ufffd" +
    "\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\023\ufffd\031" +
    "\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\071\ufffd" +
    "\001\002\000\040\005\ufff8\007\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\021\ufff8\023\ufff8\031\ufff8\060\ufff8\061\ufff8" +
    "\062\ufff8\063\ufff8\064\ufff8\071\ufff8\001\002\000\014\027" +
    "\202\031\uffc2\034\uffc2\057\uffc2\071\uffbb\001\002\000\004" +
    "\065\237\001\002\000\040\005\ufff7\007\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\023\ufff7\031\ufff7\060\ufff7" +
    "\061\ufff7\062\ufff7\063\ufff7\064\ufff7\071\ufff7\001\002\000" +
    "\004\065\236\001\002\000\010\031\212\034\211\057\234" +
    "\001\002\000\004\065\233\001\002\000\004\071\227\001" +
    "\002\000\040\005\ufff5\007\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\021\ufff5\023\ufff5\031\ufff5\060\ufff5\061\ufff5\062" +
    "\ufff5\063\ufff5\064\ufff5\071\ufff5\001\002\000\004\027\217" +
    "\001\002\000\004\027\076\001\002\000\004\065\075\001" +
    "\002\000\040\005\ufffb\007\ufffb\015\ufffb\016\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\023\ufffb\031\ufffb\060\ufffb\061\ufffb\062" +
    "\ufffb\063\ufffb\064\ufffb\071\ufffb\001\002\000\032\027\114" +
    "\031\111\036\100\043\113\044\110\045\112\050\105\066" +
    "\101\067\077\070\103\071\106\072\107\001\002\000\050" +
    "\030\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\046\uffc7\047\uffc7\051\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\065\uffc7\001" +
    "\002\000\032\027\114\031\111\036\100\043\113\044\110" +
    "\045\112\050\105\066\101\067\077\070\103\071\106\072" +
    "\107\001\002\000\050\030\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\046" +
    "\uffc8\047\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8" +
    "\056\uffc8\065\uffc8\001\002\000\050\030\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6" +
    "\042\uffc6\046\uffc6\047\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\065\uffc6\001\002\000\050\030\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\046\uffd0\047\uffd0\051\uffd0\052\uffd0" +
    "\053\uffd0\054\uffd0\055\uffd0\056\uffd0\065\uffd0\001\002\000" +
    "\052\030\uffc9\031\212\032\uffc9\033\uffc9\034\211\035\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\046\uffc9\047" +
    "\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9" +
    "\065\uffc9\001\002\000\032\027\114\031\111\036\100\043" +
    "\113\044\110\045\112\050\105\066\101\067\077\070\103" +
    "\071\106\072\107\001\002\000\054\027\202\030\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\042\uffc2\046\uffc2\047\uffc2\051\uffc2\052" +
    "\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\065\uffc2\001\002" +
    "\000\050\030\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\uffce\046\uffce\047\uffce" +
    "\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce\065" +
    "\uffce\001\002\000\004\027\177\001\002\000\032\027\114" +
    "\031\111\036\100\043\113\044\110\045\112\050\105\066" +
    "\101\067\077\070\103\071\106\072\107\001\002\000\004" +
    "\027\167\001\002\000\004\027\164\001\002\000\032\027" +
    "\114\031\111\036\100\043\113\044\110\045\112\050\105" +
    "\066\101\067\077\070\103\071\106\072\107\001\002\000" +
    "\042\030\137\034\122\035\132\036\121\037\125\040\130" +
    "\041\133\042\124\046\136\047\126\051\135\052\127\053" +
    "\134\054\123\055\131\056\120\001\002\000\050\030\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\046\uffc5\047\uffc5\051\uffc5\052\uffc5" +
    "\053\uffc5\054\uffc5\055\uffc5\056\uffc5\065\uffc5\001\002\000" +
    "\050\030\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\042\uffd3\046\uffd3\047\uffd3\051" +
    "\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\065\uffd3" +
    "\001\002\000\032\027\114\031\111\036\100\043\113\044" +
    "\110\045\112\050\105\066\101\067\077\070\103\071\106" +
    "\072\107\001\002\000\032\027\114\031\111\036\100\043" +
    "\113\044\110\045\112\050\105\066\101\067\077\070\103" +
    "\071\106\072\107\001\002\000\032\027\114\031\111\036" +
    "\100\043\113\044\110\045\112\050\105\066\101\067\077" +
    "\070\103\071\106\072\107\001\002\000\032\027\114\031" +
    "\111\036\100\043\113\044\110\045\112\050\105\066\101" +
    "\067\077\070\103\071\106\072\107\001\002\000\032\027" +
    "\114\031\111\036\100\043\113\044\110\045\112\050\105" +
    "\066\101\067\077\070\103\071\106\072\107\001\002\000" +
    "\032\027\114\031\111\036\100\043\113\044\110\045\112" +
    "\050\105\066\101\067\077\070\103\071\106\072\107\001" +
    "\002\000\032\027\114\031\111\036\100\043\113\044\110" +
    "\045\112\050\105\066\101\067\077\070\103\071\106\072" +
    "\107\001\002\000\032\027\114\031\111\036\100\043\113" +
    "\044\110\045\112\050\105\066\101\067\077\070\103\071" +
    "\106\072\107\001\002\000\032\027\114\031\111\036\100" +
    "\043\113\044\110\045\112\050\105\066\101\067\077\070" +
    "\103\071\106\072\107\001\002\000\032\027\114\031\111" +
    "\036\100\043\113\044\110\045\112\050\105\066\101\067" +
    "\077\070\103\071\106\072\107\001\002\000\032\027\114" +
    "\031\111\036\100\043\113\044\110\045\112\050\105\066" +
    "\101\067\077\070\103\071\106\072\107\001\002\000\032" +
    "\027\114\031\111\036\100\043\113\044\110\045\112\050" +
    "\105\066\101\067\077\070\103\071\106\072\107\001\002" +
    "\000\032\027\114\031\111\036\100\043\113\044\110\045" +
    "\112\050\105\066\101\067\077\070\103\071\106\072\107" +
    "\001\002\000\032\027\114\031\111\036\100\043\113\044" +
    "\110\045\112\050\105\066\101\067\077\070\103\071\106" +
    "\072\107\001\002\000\032\027\114\031\111\036\100\043" +
    "\113\044\110\045\112\050\105\066\101\067\077\070\103" +
    "\071\106\072\107\001\002\000\024\016\023\017\027\020" +
    "\021\021\070\023\030\031\025\060\072\063\073\071\062" +
    "\001\002\000\026\016\023\017\027\020\021\021\070\023" +
    "\030\031\025\060\072\063\073\064\141\071\062\001\002" +
    "\000\040\005\uffef\007\uffef\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\023\uffef\031\uffef\060\uffef\061\uffef\062\uffef" +
    "\063\uffef\064\uffef\071\uffef\001\002\000\040\005\ufffe\007" +
    "\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\023\ufffe" +
    "\031\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\071" +
    "\ufffe\001\002\000\050\030\uffde\032\uffde\033\uffde\034\uffde" +
    "\035\132\036\121\037\125\040\130\041\133\042\124\046" +
    "\uffde\047\uffde\051\uffde\052\uffde\053\134\054\123\055\131" +
    "\056\120\065\uffde\001\002\000\050\030\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\132\036\121\037\125\040\130\041\133" +
    "\042\124\046\136\047\126\051\uffe1\052\uffe1\053\134\054" +
    "\123\055\131\056\120\065\uffe1\001\002\000\050\030\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\132\036\121\037\125\040" +
    "\130\041\133\042\124\046\uffdd\047\uffdd\051\uffdd\052\uffdd" +
    "\053\uffdd\054\uffdd\055\uffdd\056\uffdd\065\uffdd\001\002\000" +
    "\050\030\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\041\uffd5\042\uffd5\046\uffd5\047\uffd5\051" +
    "\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\065\uffd5" +
    "\001\002\000\050\030\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\125\040\130\041\133\042\124\046\uffd9" +
    "\047\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056" +
    "\uffd9\065\uffd9\001\002\000\050\030\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\132\036\121\037\125\040\130\041\133\042" +
    "\124\046\uffdb\047\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb" +
    "\055\uffdb\056\uffdb\065\uffdb\001\002\000\050\030\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\046\uffd7\047\uffd7\051\uffd7\052\uffd7\053" +
    "\uffd7\054\uffd7\055\uffd7\056\uffd7\065\uffd7\001\002\000\050" +
    "\030\uffe0\032\uffe0\033\uffe0\034\uffe0\035\132\036\121\037" +
    "\125\040\130\041\133\042\124\046\136\047\126\051\uffe0" +
    "\052\uffe0\053\134\054\123\055\131\056\120\065\uffe0\001" +
    "\002\000\050\030\uffdf\032\uffdf\033\uffdf\034\uffdf\035\132" +
    "\036\121\037\125\040\130\041\133\042\124\046\136\047" +
    "\uffdf\051\uffdf\052\uffdf\053\134\054\123\055\131\056\120" +
    "\065\uffdf\001\002\000\050\030\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6" +
    "\046\uffd6\047\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055" +
    "\uffd6\056\uffd6\065\uffd6\001\002\000\050\030\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\046\uffd4\047\uffd4\051\uffd4\052\uffd4\053\uffd4" +
    "\054\uffd4\055\uffd4\056\uffd4\065\uffd4\001\002\000\050\030" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\035\132\036\121\037\125" +
    "\040\130\041\133\042\124\046\uffdc\047\uffdc\051\uffdc\052" +
    "\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\065\uffdc\001\002" +
    "\000\050\030\uffd2\032\uffd2\033\uffd2\034\122\035\132\036" +
    "\121\037\125\040\130\041\133\042\124\046\136\047\126" +
    "\051\135\052\127\053\134\054\123\055\131\056\120\065" +
    "\uffd2\001\002\000\050\030\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\037\125\040\130\041\133\042\124\046" +
    "\uffd8\047\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8" +
    "\056\uffd8\065\uffd8\001\002\000\050\030\uffda\032\uffda\033" +
    "\uffda\034\uffda\035\132\036\121\037\125\040\130\041\133" +
    "\042\124\046\uffda\047\uffda\051\uffda\052\uffda\053\uffda\054" +
    "\uffda\055\uffda\056\uffda\065\uffda\001\002\000\042\030\163" +
    "\034\122\035\132\036\121\037\125\040\130\041\133\042" +
    "\124\046\136\047\126\051\135\052\127\053\134\054\123" +
    "\055\131\056\120\001\002\000\050\030\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\046\uffd1\047\uffd1\051\uffd1\052\uffd1\053\uffd1\054" +
    "\uffd1\055\uffd1\056\uffd1\065\uffd1\001\002\000\032\027\114" +
    "\031\111\036\100\043\113\044\110\045\112\050\105\066" +
    "\101\067\077\070\103\071\106\072\107\001\002\000\004" +
    "\030\166\001\002\000\050\030\uffcd\032\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\046\uffcd\047\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\065\uffcd\001\002\000\032\027\114\031\111" +
    "\036\100\043\113\044\110\045\112\050\105\066\101\067" +
    "\077\070\103\071\106\072\107\001\002\000\004\030\171" +
    "\001\002\000\050\030\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\046\uffcb" +
    "\047\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056" +
    "\uffcb\065\uffcb\001\002\000\006\032\175\033\174\001\002" +
    "\000\006\032\uffb3\033\uffb3\001\002\000\032\027\114\031" +
    "\111\036\100\043\113\044\110\045\112\050\105\066\101" +
    "\067\077\070\103\071\106\072\107\001\002\000\050\030" +
    "\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\041\uffb5\042\uffb5\046\uffb5\047\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\065\uffb5\001\002" +
    "\000\006\032\uffb4\033\uffb4\001\002\000\032\027\114\031" +
    "\111\036\100\043\113\044\110\045\112\050\105\066\101" +
    "\067\077\070\103\071\106\072\107\001\002\000\004\030" +
    "\201\001\002\000\050\030\uffcc\032\uffcc\033\uffcc\034\uffcc" +
    "\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\046" +
    "\uffcc\047\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc" +
    "\056\uffcc\065\uffcc\001\002\000\032\027\114\031\111\036" +
    "\100\043\113\044\110\045\112\050\105\066\101\067\077" +
    "\070\103\071\106\072\107\001\002\000\044\030\uffc0\033" +
    "\uffc0\034\122\035\132\036\121\037\125\040\130\041\133" +
    "\042\124\046\136\047\126\051\135\052\127\053\134\054" +
    "\123\055\131\056\120\001\002\000\006\030\206\033\205" +
    "\001\002\000\032\027\114\031\111\036\100\043\113\044" +
    "\110\045\112\050\105\066\101\067\077\070\103\071\106" +
    "\072\107\001\002\000\050\030\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee" +
    "\046\uffee\047\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055" +
    "\uffee\056\uffee\065\uffee\001\002\000\044\030\uffc1\033\uffc1" +
    "\034\122\035\132\036\121\037\125\040\130\041\133\042" +
    "\124\046\136\047\126\051\135\052\127\053\134\054\123" +
    "\055\131\056\120\001\002\000\050\030\uffca\032\uffca\033" +
    "\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca" +
    "\042\uffca\046\uffca\047\uffca\051\uffca\052\uffca\053\uffca\054" +
    "\uffca\055\uffca\056\uffca\065\uffca\001\002\000\004\071\215" +
    "\001\002\000\032\027\114\031\111\036\100\043\113\044" +
    "\110\045\112\050\105\066\101\067\077\070\103\071\106" +
    "\072\107\001\002\000\042\032\214\034\122\035\132\036" +
    "\121\037\125\040\130\041\133\042\124\046\136\047\126" +
    "\051\135\052\127\053\134\054\123\055\131\056\120\001" +
    "\002\000\054\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\046" +
    "\uffc4\047\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4" +
    "\056\uffc4\057\uffc4\065\uffc4\001\002\000\054\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\046\uffc3\047\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\065\uffc3" +
    "\001\002\000\050\030\uffcf\032\uffcf\033\uffcf\034\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\046\uffcf" +
    "\047\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056" +
    "\uffcf\065\uffcf\001\002\000\032\027\114\031\111\036\100" +
    "\043\113\044\110\045\112\050\105\066\101\067\077\070" +
    "\103\071\106\072\107\001\002\000\042\030\221\034\122" +
    "\035\132\036\121\037\125\040\130\041\133\042\124\046" +
    "\136\047\126\051\135\052\127\053\134\054\123\055\131" +
    "\056\120\001\002\000\024\016\023\017\027\020\021\021" +
    "\070\023\030\031\025\060\072\063\073\071\062\001\002" +
    "\000\030\016\023\017\027\020\021\021\070\023\030\031" +
    "\025\060\072\061\223\062\224\063\073\071\062\001\002" +
    "\000\024\016\023\017\027\020\021\021\070\023\030\031" +
    "\025\060\072\063\073\071\062\001\002\000\040\005\ufff1" +
    "\007\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\023" +
    "\ufff1\031\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1" +
    "\071\ufff1\001\002\000\026\016\023\017\027\020\021\021" +
    "\070\023\030\031\025\060\072\062\226\063\073\071\062" +
    "\001\002\000\040\005\ufff0\007\ufff0\015\ufff0\016\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\023\ufff0\031\ufff0\060\ufff0\061\ufff0" +
    "\062\ufff0\063\ufff0\064\ufff0\071\ufff0\001\002\000\004\051" +
    "\230\001\002\000\016\016\023\017\027\020\021\023\030" +
    "\031\025\071\024\001\002\000\004\022\232\001\002\000" +
    "\040\005\uffed\007\uffed\015\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\023\uffed\031\uffed\060\uffed\061\uffed\062\uffed\063" +
    "\uffed\064\uffed\071\uffed\001\002\000\040\005\ufffa\007\ufffa" +
    "\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\023\ufffa\031" +
    "\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\071\ufffa" +
    "\001\002\000\032\027\114\031\111\036\100\043\113\044" +
    "\110\045\112\050\105\066\101\067\077\070\103\071\106" +
    "\072\107\001\002\000\042\034\122\035\132\036\121\037" +
    "\125\040\130\041\133\042\124\046\136\047\126\051\135" +
    "\052\127\053\134\054\123\055\131\056\120\065\ufff2\001" +
    "\002\000\040\005\ufff6\007\ufff6\015\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\021\ufff6\023\ufff6\031\ufff6\060\ufff6\061\ufff6\062" +
    "\ufff6\063\ufff6\064\ufff6\071\ufff6\001\002\000\040\005\ufffc" +
    "\007\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\023" +
    "\ufffc\031\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc" +
    "\071\ufffc\001\002\000\006\057\241\065\ufff4\001\002\000" +
    "\032\027\114\031\111\036\100\043\113\044\110\045\112" +
    "\050\105\066\101\067\077\070\103\071\106\072\107\001" +
    "\002\000\042\034\122\035\132\036\121\037\125\040\130" +
    "\041\133\042\124\046\136\047\126\051\135\052\127\053" +
    "\134\054\123\055\131\056\120\065\ufff3\001\002\000\010" +
    "\004\uffe8\006\uffe8\014\uffe8\001\002\000\004\071\245\001" +
    "\002\000\004\013\246\001\002\000\010\010\045\011\042" +
    "\012\043\001\002\000\006\030\uffe6\033\uffe6\001\002\000" +
    "\024\016\023\017\027\020\021\021\070\023\030\031\025" +
    "\060\072\063\073\071\062\001\002\000\026\015\252\016" +
    "\023\017\027\020\021\021\070\023\030\031\025\060\072" +
    "\063\073\071\062\001\002\000\004\002\001\001\002\000" +
    "\004\071\254\001\002\000\004\027\255\001\002\000\016" +
    "\016\023\017\027\020\021\023\030\031\025\071\024\001" +
    "\002\000\006\030\257\033\053\001\002\000\024\016\023" +
    "\017\027\020\021\021\070\023\030\031\025\060\072\063" +
    "\073\071\062\001\002\000\026\005\261\016\023\017\027" +
    "\020\021\021\070\023\030\031\025\060\072\063\073\071" +
    "\062\001\002\000\010\004\uffe7\006\uffe7\014\uffe7\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\006\003\004\023\003\001\001\000\012\007" +
    "\007\010\012\011\013\012\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\252\005\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\014\010\012\011\013\012\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\025" +
    "\005\021\017\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\031\005\021\006\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\035\005" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\051\005\021\001\001\000\002\001" +
    "\001\000\006\004\050\005\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\243\005\021\001\001\000" +
    "\034\004\056\005\021\026\054\027\057\030\062\031\073" +
    "\032\066\033\055\034\060\035\063\036\064\037\070\041" +
    "\065\001\001\000\032\004\056\005\021\027\141\030\062" +
    "\031\073\032\066\033\055\034\060\035\063\036\064\037" +
    "\070\041\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\021\116\036\115\040\114\041" +
    "\103\043\101\001\001\000\002\001\001\000\012\021\215" +
    "\036\115\041\103\043\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\207\036\115\041\103\043\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\021\172" +
    "\036\115\041\103\043\101\045\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\021\116\036\115\040\161" +
    "\041\103\043\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\021\116\036\115\040\160" +
    "\041\103\043\101\001\001\000\014\021\116\036\115\040" +
    "\157\041\103\043\101\001\001\000\014\021\116\036\115" +
    "\040\156\041\103\043\101\001\001\000\014\021\116\036" +
    "\115\040\155\041\103\043\101\001\001\000\014\021\116" +
    "\036\115\040\154\041\103\043\101\001\001\000\014\021" +
    "\116\036\115\040\153\041\103\043\101\001\001\000\014" +
    "\021\116\036\115\040\152\041\103\043\101\001\001\000" +
    "\014\021\116\036\115\040\151\041\103\043\101\001\001" +
    "\000\014\021\116\036\115\040\150\041\103\043\101\001" +
    "\001\000\014\021\116\036\115\040\147\041\103\043\101" +
    "\001\001\000\014\021\116\036\115\040\146\041\103\043" +
    "\101\001\001\000\014\021\116\036\115\040\145\041\103" +
    "\043\101\001\001\000\014\021\116\036\115\040\144\041" +
    "\103\043\101\001\001\000\014\021\116\036\115\040\143" +
    "\041\103\043\101\001\001\000\014\021\116\036\115\040" +
    "\142\041\103\043\101\001\001\000\034\004\056\005\021" +
    "\026\137\027\057\030\062\031\073\032\066\033\055\034" +
    "\060\035\063\036\064\037\070\041\065\001\001\000\032" +
    "\004\056\005\021\027\141\030\062\031\073\032\066\033" +
    "\055\034\060\035\063\036\064\037\070\041\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\164\036\115\041\103\043\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\167\036\115\041\103" +
    "\043\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\175\036\115" +
    "\041\103\043\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\021\177\036\115\041\103\043\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\021\116\036" +
    "\115\040\202\041\103\042\203\043\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\021\116\036\115\040" +
    "\206\041\103\043\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\021" +
    "\116\036\115\040\212\041\103\043\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\021\116\036\115\040\217\041\103\043\101" +
    "\001\001\000\002\001\001\000\034\004\056\005\021\026" +
    "\221\027\057\030\062\031\073\032\066\033\055\034\060" +
    "\035\063\036\064\037\070\041\065\001\001\000\032\004" +
    "\056\005\021\027\141\030\062\031\073\032\066\033\055" +
    "\034\060\035\063\036\064\037\070\041\065\001\001\000" +
    "\034\004\056\005\021\026\224\027\057\030\062\031\073" +
    "\032\066\033\055\034\060\035\063\036\064\037\070\041" +
    "\065\001\001\000\002\001\001\000\032\004\056\005\021" +
    "\027\141\030\062\031\073\032\066\033\055\034\060\035" +
    "\063\036\064\037\070\041\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\230\005\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\021\116\036\115\040\234\041\103\043\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\021\116\036\115\040\241\041\103\043" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\246\001\001\000" +
    "\002\001\001\000\034\004\056\005\021\026\250\027\057" +
    "\030\062\031\073\032\066\033\055\034\060\035\063\036" +
    "\064\037\070\041\065\001\001\000\032\004\056\005\021" +
    "\027\141\030\062\031\073\032\066\033\055\034\060\035" +
    "\063\036\064\037\070\041\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\025\005" +
    "\021\017\255\001\001\000\002\001\001\000\034\004\056" +
    "\005\021\026\257\027\057\030\062\031\073\032\066\033" +
    "\055\034\060\035\063\036\064\037\070\041\065\001\001" +
    "\000\032\004\056\005\021\027\141\030\062\031\073\032" +
    "\066\033\055\034\060\035\063\036\064\037\070\041\065" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$preparser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$preparser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$preparser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$preparser$actions {


    TipoES es;
    Bloque bloque;
    boolean error = false;
    HashMap<String,TablaSim> discGlob;

  private final preparser parser;

  /** Constructor */
  CUP$preparser$actions(preparser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$preparser$do_action(
    int                        CUP$preparser$act_num,
    java_cup.runtime.lr_parser CUP$preparser$parser,
    java.util.Stack            CUP$preparser$stack,
    int                        CUP$preparser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$preparser$result;

      /* select the action based on the action number */
      switch (CUP$preparser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Lelem ::= fact 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(35/*Lelem*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Lelem ::= Lelem COMA fact 
            {
              Object RESULT = null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		Object L = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(35/*Lelem*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // arreglo ::= ACORCH Lelem CCORCH 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(33/*arreglo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LC ::= LC COMA tipo ID 
            {
              TablaSim RESULT = null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).right;
		TablaSim ts = (TablaSim)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		 	Informacion info = new Informacion(i.text, t, null,0);		
			ts.add(i.text,info);
			RESULT = ts; 
		
              CUP$preparser$result = new java_cup.runtime.Symbol(4/*LC*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LC ::= tipo ID 
            {
              TablaSim RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		 	TablaSim ts = new TablaSim();
			Informacion info = new Informacion(i.text, t, null,0);	
			ts.add(i.text,info);
			RESULT = ts; 
		
              CUP$preparser$result = new java_cup.runtime.Symbol(4/*LC*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipoB ::= DECLBOOL 
            {
              TipoF RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		 RESULT = TipoF.BOOL; 
              CUP$preparser$result = new java_cup.runtime.Symbol(3/*tipoB*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipoB ::= DECLREAL 
            {
              TipoF RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		 RESULT = TipoF.FLOAT;  
              CUP$preparser$result = new java_cup.runtime.Symbol(3/*tipoB*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipoB ::= DECLENTERO 
            {
              TipoF RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		 System.out.println("hola");RESULT = TipoF.INT; 
              CUP$preparser$result = new java_cup.runtime.Symbol(3/*tipoB*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipo ::= ID 
            {
              Tipo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		 //chequear en TS y obtener arbol de tipo
			
			
              CUP$preparser$result = new java_cup.runtime.Symbol(2/*tipo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipo ::= REGISTRO LC FINREG 
            {
              Tipo RESULT = null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		TablaSim ts = (TablaSim)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;
		 RESULT = new TRegistro(ts); 
              CUP$preparser$result = new java_cup.runtime.Symbol(2/*tipo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipo ::= ACORCH CCORCH tipo 
            {
              Tipo RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		 RESULT = new TArreglo(t,-1); 
              CUP$preparser$result = new java_cup.runtime.Symbol(2/*tipo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo ::= ACORCH ENTERO CCORCH tipo 
            {
              Tipo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		 RESULT = new TArreglo(t,i); 
              CUP$preparser$result = new java_cup.runtime.Symbol(2/*tipo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo ::= tipoB 
            {
              Tipo RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		TipoF t = (TipoF)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		 RESULT = new TBasico(t); 
              CUP$preparser$result = new java_cup.runtime.Symbol(2/*tipo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LParam ::= expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(32/*LParam*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LParam ::= LParam COMA expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(32/*LParam*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LVal ::= ID 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(31/*LVal*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LVal ::= LVal PUNTO ID 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(31/*LVal*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LVal ::= LVal ACORCH expr CCORCH 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(31/*LVal*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // fact ::= iLlamada 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // fact ::= arreglo 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // fact ::= FALSO 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // fact ::= CIERTO 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // fact ::= LVal 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // fact ::= NOLOG fact 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // fact ::= REDONDEO APARENT fact CPARENT 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // fact ::= PISO APARENT fact CPARENT 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // fact ::= TECHO APARENT fact CPARENT 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // fact ::= REAL 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // fact ::= MENOS fact 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // fact ::= ENTERO 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // fact ::= APARENT expr CPARENT 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(15/*fact*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr PUNTO expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= fact 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr MOD expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr DIV expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr POR expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr ENTRE expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr MENOS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr MAS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr MENORIGUAL expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr MAYORIGUAL expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr MENOR expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr MAYOR expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr YLOG expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr OLOG expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr DIF expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr IGUAL expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Metodo ::= ENTSAL 
            {
              Metodo RESULT = null;
		 RESULT = Metodo.ES; 
              CUP$preparser$result = new java_cup.runtime.Symbol(14/*Metodo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Metodo ::= SALIDA 
            {
              Metodo RESULT = null;
		 RESULT = Metodo.S; 
              CUP$preparser$result = new java_cup.runtime.Symbol(14/*Metodo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Metodo ::= ENTRADA 
            {
              Metodo RESULT = null;
		 RESULT = Metodo.E; 
              CUP$preparser$result = new java_cup.runtime.Symbol(14/*Metodo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LVar ::= tipo ID DOSPUNTOS Metodo 
            {
              LinkedList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Metodo m = (Metodo)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		 	
			Param p = new Param(i.text,t,m);
			LinkedList<Param> ps = new LinkedList<Param>();
			ps.add(p);
			RESULT = ps;
        
              CUP$preparser$result = new java_cup.runtime.Symbol(13/*LVar*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LVar ::= LVar COMA tipo ID DOSPUNTOS Metodo 
            {
              LinkedList RESULT = null;
		int psleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-5)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-5)).right;
		LinkedList ps = (LinkedList)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Metodo m = (Metodo)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
			
			Param p = new Param (i.text, t, m);
			ps.add(p);
			RESULT = ps;
		
              CUP$preparser$result = new java_cup.runtime.Symbol(13/*LVar*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-5)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Func ::= FUNC tipo ID APARENT LVar CPARENT lInst FINFUNC 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-5)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-5)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).right;
		LinkedList ps = (LinkedList)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-3)).value;
			
				if( bloque.getTS().isDefined(i.text)){
					bloque.getTS().get(i.text).setStatus(1);
				}else{
					InfoSub is = new InfoSub(i.text,null, null, ps, TipoF.FUNC, t);
					Informacion info = new Informacion(i.text, TipoF.FUNC, is, 0);
					bloque.getTS().add(i.text, info);
				}
			
              CUP$preparser$result = new java_cup.runtime.Symbol(8/*Func*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-7)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Proc ::= PROC ID APARENT LVar CPARENT lInst FINPROC 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-5)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-5)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).right;
		LinkedList ps = (LinkedList)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-3)).value;
			
				
				if( bloque.getTS().isDefined(i.text)){
				    bloque.getTS().get(i.text).setStatus(1);
					System.out.println("ERROR (linea "+(i.lineBegin+1)+
					") El subprograma '"+i.text+"' ya esta definido.");
				}else{
					InfoSub is = new InfoSub(i.text,null,null,ps, TipoF.PROC, null);
					Informacion info = new Informacion(i.text, TipoF.PROC, is, 0);
					bloque.getTS().add(i.text, info);
				}		
				
			
              CUP$preparser$result = new java_cup.runtime.Symbol(7/*Proc*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-6)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SubProg ::= Func 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(6/*SubProg*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SubProg ::= Proc 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(6/*SubProg*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LSubProg ::= 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(5/*LSubProg*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LSubProg ::= SubProg LSubProg 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(5/*LSubProg*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // iDefTipo ::= TIPODATO ID IGUAL tipo FINT 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(29/*iDefTipo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // iLlamada ::= ID APARENT LParam CPARENT 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(28/*iLlamada*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // iHacer ::= HACER APARENT expr CPARENT lInst FINHACER 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(27/*iHacer*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-5)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // iSino ::= SI APARENT expr CPARENT lInst SINO lInst FINSI 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-5)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).right;
		Object l1 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		Object l2 = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(26/*iSino*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-7)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // iSi ::= SI APARENT expr CPARENT lInst FINSI 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(25/*iSi*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-5)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // iAsig ::= LVal ASIGNACION expr 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(24/*iAsig*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // iDeclA ::= tipo ID ASIGNACION expr 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(23/*iDeclA*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Decl ::= tipo ID 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(22/*Decl*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inst ::= iDefTipo 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(21/*inst*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inst ::= iLlamada PYCOMA 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(21/*inst*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inst ::= iHacer 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(21/*inst*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inst ::= iSino 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(21/*inst*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inst ::= iSi 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(21/*inst*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inst ::= iAsig PYCOMA 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(21/*inst*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inst ::= iDeclA PYCOMA 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(21/*inst*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inst ::= Decl PYCOMA 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(21/*inst*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lInst ::= inst 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(20/*lInst*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lInst ::= lInst inst 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;

              CUP$preparser$result = new java_cup.runtime.Symbol(20/*lInst*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicializar ::= 
            {
              Object RESULT = null;
		 Misc.acumulador = new Bloque(100); bloque = Misc.acumulador; 
              CUP$preparser$result = new java_cup.runtime.Symbol(17/*inicializar*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;
		RESULT = start_val;
              CUP$preparser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$preparser$parser.done_parsing();
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= inicializar LSubProg COMIENZO lInst FIN 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(1/*inicio*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

