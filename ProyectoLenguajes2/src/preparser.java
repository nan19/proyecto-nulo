
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Apr 07 06:28:50 VET 2008
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Mon Apr 07 06:28:50 VET 2008
  */
public class preparser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public preparser() {super();}

  /** Constructor which sets the default scanner. */
  public preparser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\003\005\000\002\002\004\000\002\016" +
    "\002\000\002\005\004\000\002\005\004\000\002\005\002" +
    "\000\002\007\011\000\002\010\012\000\002\011\007\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\012" +
    "\005\000\002\013\005\000\002\014\005\000\002\015\006" +
    "\000\002\015\004\000\002\017\004\000\002\017\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\136\004\uffff\005\uffff\007\uffff\014\uffff\015" +
    "\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff" +
    "\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032" +
    "\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff" +
    "\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047" +
    "\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055\uffff" +
    "\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff\063\uffff\064" +
    "\uffff\065\uffff\066\uffff\001\002\000\136\004\ufffc\005\ufffc" +
    "\007\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021" +
    "\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc" +
    "\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036" +
    "\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc" +
    "\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053" +
    "\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc" +
    "\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\001\002\000" +
    "\004\002\006\001\002\000\004\002\000\001\002\000\136" +
    "\004\046\005\053\007\061\014\010\015\025\016\023\017" +
    "\013\020\065\021\047\022\067\023\070\024\037\025\040" +
    "\026\041\027\071\030\043\031\011\032\064\033\032\034" +
    "\045\035\022\036\034\037\062\040\020\041\012\042\054" +
    "\043\026\044\042\045\052\046\044\047\035\050\024\051" +
    "\050\052\015\053\027\054\063\055\060\056\055\057\031" +
    "\060\057\061\036\062\016\063\056\064\014\065\033\066" +
    "\051\001\002\000\140\002\uffeb\004\uffeb\006\uffeb\010\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb" +
    "\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054" +
    "\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb" +
    "\063\uffeb\064\uffeb\065\uffeb\066\uffeb\001\002\000\140\002" +
    "\uffe3\004\uffe3\006\uffe3\010\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3" +
    "\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057" +
    "\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3" +
    "\066\uffe3\001\002\000\140\002\uffe0\004\uffe0\006\uffe0\010" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045" +
    "\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0" +
    "\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062" +
    "\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\001\002\000\140" +
    "\002\uffd0\004\uffd0\006\uffd0\010\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050" +
    "\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0" +
    "\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065" +
    "\uffd0\066\uffd0\001\002\000\140\002\uffd7\004\uffd7\006\uffd7" +
    "\010\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7" +
    "\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053" +
    "\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7" +
    "\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\001\002\000" +
    "\140\002\uffcd\004\uffcd\006\uffcd\010\uffcd\014\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056" +
    "\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd" +
    "\065\uffcd\066\uffcd\001\002\000\140\002\uffd5\004\uffd5\006" +
    "\uffd5\010\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061" +
    "\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\001\002" +
    "\000\134\002\001\004\046\014\010\015\025\016\023\017" +
    "\013\020\065\021\047\022\067\023\070\024\037\025\040" +
    "\026\041\027\071\030\043\031\011\032\064\033\032\034" +
    "\045\035\022\036\034\037\062\040\020\041\012\042\054" +
    "\043\026\044\042\045\052\046\044\047\035\050\024\051" +
    "\050\052\015\053\027\054\063\055\060\056\055\057\031" +
    "\060\057\061\036\062\016\063\056\064\014\065\033\066" +
    "\051\001\002\000\140\002\uffe1\004\uffe1\006\uffe1\010\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1" +
    "\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054" +
    "\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1" +
    "\063\uffe1\064\uffe1\065\uffe1\066\uffe1\001\002\000\136\004" +
    "\ufffd\005\ufffd\007\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd" +
    "\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026" +
    "\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd" +
    "\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043" +
    "\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd" +
    "\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060" +
    "\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd" +
    "\001\002\000\140\002\uffc5\004\uffc5\006\uffc5\010\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063" +
    "\uffc5\064\uffc5\065\uffc5\066\uffc5\001\002\000\140\002\uffd1" +
    "\004\uffd1\006\uffd1\010\uffd1\014\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051" +
    "\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066" +
    "\uffd1\001\002\000\140\002\uffd9\004\uffd9\006\uffd9\010\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054" +
    "\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9" +
    "\063\uffd9\064\uffd9\065\uffd9\066\uffd9\001\002\000\140\002" +
    "\uffd2\004\uffd2\006\uffd2\010\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2" +
    "\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2" +
    "\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057" +
    "\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2" +
    "\066\uffd2\001\002\000\140\002\uffde\004\uffde\006\uffde\010" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045" +
    "\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde" +
    "\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062" +
    "\uffde\063\uffde\064\uffde\065\uffde\066\uffde\001\002\000\140" +
    "\002\uffcc\004\uffcc\006\uffcc\010\uffcc\014\uffcc\015\uffcc\016" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc" +
    "\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065" +
    "\uffcc\066\uffcc\001\002\000\136\004\ufffe\005\ufffe\007\ufffe" +
    "\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022" +
    "\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe" +
    "\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037" +
    "\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe" +
    "\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054" +
    "\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe" +
    "\063\ufffe\064\ufffe\065\ufffe\066\ufffe\001\002\000\140\002" +
    "\uffc8\004\uffc8\006\uffc8\010\uffc8\014\uffc8\015\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042" +
    "\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8" +
    "\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057" +
    "\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8" +
    "\066\uffc8\001\002\000\140\002\uffc1\004\uffc1\006\uffc1\010" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045" +
    "\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1" +
    "\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062" +
    "\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\001\002\000\140" +
    "\002\uffd3\004\uffd3\006\uffd3\010\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050" +
    "\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3" +
    "\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065" +
    "\uffd3\066\uffd3\001\002\000\140\002\uffc6\004\uffc6\006\uffc6" +
    "\010\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053" +
    "\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6" +
    "\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\001\002\000" +
    "\140\002\uffda\004\uffda\006\uffda\010\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041" +
    "\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda" +
    "\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda" +
    "\065\uffda\066\uffda\001\002\000\140\002\uffc3\004\uffc3\006" +
    "\uffc3\010\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061" +
    "\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\001\002" +
    "\000\140\002\uffe8\004\uffe8\006\uffe8\010\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047" +
    "\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064" +
    "\uffe8\065\uffe8\066\uffe8\001\002\000\140\002\uffe7\004\uffe7" +
    "\006\uffe7\010\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7" +
    "\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\001" +
    "\002\000\140\002\uffe6\004\uffe6\006\uffe6\010\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6" +
    "\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055" +
    "\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6" +
    "\064\uffe6\065\uffe6\066\uffe6\001\002\000\140\002\uffdd\004" +
    "\uffdd\006\uffdd\010\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043" +
    "\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060" +
    "\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd" +
    "\001\002\000\140\002\uffe4\004\uffe4\006\uffe4\010\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046" +
    "\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063" +
    "\uffe4\064\uffe4\065\uffe4\066\uffe4\001\002\000\140\002\uffdb" +
    "\004\uffdb\006\uffdb\010\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb" +
    "\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066" +
    "\uffdb\001\002\000\140\002\uffc0\004\uffc0\006\uffc0\010\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054" +
    "\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0" +
    "\063\uffc0\064\uffc0\065\uffc0\066\uffc0\001\002\000\140\002" +
    "\uffc2\004\uffc2\006\uffc2\010\uffc2\014\uffc2\015\uffc2\016\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025" +
    "\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2" +
    "\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057" +
    "\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2" +
    "\066\uffc2\001\002\000\140\002\uffce\004\uffce\006\uffce\010" +
    "\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce" +
    "\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030" +
    "\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045" +
    "\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce" +
    "\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062" +
    "\uffce\063\uffce\064\uffce\065\uffce\066\uffce\001\002\000\140" +
    "\002\uffd8\004\uffd8\006\uffd8\010\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8" +
    "\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065" +
    "\uffd8\066\uffd8\001\002\000\140\002\uffd6\004\uffd6\006\uffd6" +
    "\010\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6" +
    "\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6" +
    "\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\001\002\000" +
    "\140\002\uffdc\004\uffdc\006\uffdc\010\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056" +
    "\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc" +
    "\065\uffdc\066\uffdc\001\002\000\010\017\113\020\114\021" +
    "\117\001\002\000\140\002\uffdf\004\uffdf\006\uffdf\010\uffdf" +
    "\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf" +
    "\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054" +
    "\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf" +
    "\063\uffdf\064\uffdf\065\uffdf\066\uffdf\001\002\000\140\002" +
    "\uffc9\004\uffc9\006\uffc9\010\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9" +
    "\066\uffc9\001\002\000\140\002\uffd4\004\uffd4\006\uffd4\010" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030" +
    "\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4" +
    "\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045" +
    "\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4" +
    "\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062" +
    "\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\001\002\000\140" +
    "\002\uffc7\004\uffc7\006\uffc7\010\uffc7\014\uffc7\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7" +
    "\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065" +
    "\uffc7\066\uffc7\001\002\000\140\002\uffca\004\uffca\006\uffca" +
    "\010\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021" +
    "\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053" +
    "\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca" +
    "\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\001\002\000" +
    "\004\065\072\001\002\000\140\002\uffc4\004\uffc4\006\uffc4" +
    "\010\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4" +
    "\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\001\002\000" +
    "\140\002\uffcb\004\uffcb\006\uffcb\010\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056" +
    "\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb" +
    "\065\uffcb\066\uffcb\001\002\000\140\002\uffe2\004\uffe2\006" +
    "\uffe2\010\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2" +
    "\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061" +
    "\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\001\002" +
    "\000\140\002\uffcf\004\uffcf\006\uffcf\010\uffcf\014\uffcf\015" +
    "\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf" +
    "\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064" +
    "\uffcf\065\uffcf\066\uffcf\001\002\000\140\002\uffec\004\uffec" +
    "\006\uffec\010\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020" +
    "\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec" +
    "\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035" +
    "\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec" +
    "\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052" +
    "\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec" +
    "\061\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec\001" +
    "\002\000\140\002\uffea\004\uffea\006\uffea\010\uffea\014\uffea" +
    "\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023" +
    "\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea" +
    "\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040" +
    "\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055" +
    "\uffea\056\uffea\057\uffea\060\uffea\061\uffea\062\uffea\063\uffea" +
    "\064\uffea\065\uffea\066\uffea\001\002\000\140\002\uffe9\004" +
    "\uffe9\006\uffe9\010\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043" +
    "\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060" +
    "\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9" +
    "\001\002\000\140\002\uffe5\004\uffe5\006\uffe5\010\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5" +
    "\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063" +
    "\uffe5\064\uffe5\065\uffe5\066\uffe5\001\002\000\004\022\073" +
    "\001\002\000\010\011\100\012\074\013\075\001\002\000" +
    "\004\014\132\001\002\000\004\014\130\001\002\000\004" +
    "\023\124\001\002\000\004\023\ufff3\001\002\000\004\014" +
    "\112\001\002\000\006\023\ufff4\061\110\001\002\000\006" +
    "\023\ufff5\061\103\001\002\000\006\012\074\013\075\001" +
    "\002\000\004\023\ufff8\001\002\000\006\023\ufff6\061\106" +
    "\001\002\000\004\013\075\001\002\000\004\023\ufff9\001" +
    "\002\000\004\013\075\001\002\000\004\023\ufff7\001\002" +
    "\000\010\017\113\020\114\021\117\001\002\000\004\065" +
    "\uffbf\001\002\000\004\065\uffbe\001\002\000\010\023\ufff2" +
    "\026\121\061\ufff2\001\002\000\004\065\120\001\002\000" +
    "\004\065\uffbd\001\002\000\010\023\uffee\026\uffee\061\uffee" +
    "\001\002\000\010\017\113\020\114\021\117\001\002\000" +
    "\004\065\123\001\002\000\010\023\uffef\026\uffef\061\uffef" +
    "\001\002\000\132\004\046\014\010\015\025\016\023\017" +
    "\013\020\065\021\047\022\067\023\070\024\037\025\040" +
    "\026\041\027\071\030\043\031\011\032\064\033\032\034" +
    "\045\035\022\036\034\037\062\040\020\041\012\042\054" +
    "\043\026\044\042\045\052\046\044\047\035\050\024\051" +
    "\050\052\015\053\027\054\063\055\060\056\055\057\031" +
    "\060\057\061\036\062\016\063\056\064\014\065\033\066" +
    "\051\001\002\000\134\004\046\010\126\014\010\015\025" +
    "\016\023\017\013\020\065\021\047\022\067\023\070\024" +
    "\037\025\040\026\041\027\071\030\043\031\011\032\064" +
    "\033\032\034\045\035\022\036\034\037\062\040\020\041" +
    "\012\042\054\043\026\044\042\045\052\046\044\047\035" +
    "\050\024\051\050\052\015\053\027\054\063\055\060\056" +
    "\055\057\031\060\057\061\036\062\016\063\056\064\014" +
    "\065\033\066\051\001\002\000\136\004\ufffb\005\ufffb\007" +
    "\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb" +
    "\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030" +
    "\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045" +
    "\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb" +
    "\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062" +
    "\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\001\002\000\140" +
    "\002\uffed\004\uffed\006\uffed\010\uffed\014\uffed\015\uffed\016" +
    "\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed" +
    "\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033" +
    "\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed" +
    "\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050" +
    "\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed" +
    "\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065" +
    "\uffed\066\uffed\001\002\000\010\017\113\020\114\021\117" +
    "\001\002\000\006\023\ufff0\026\121\001\002\000\010\017" +
    "\113\020\114\021\117\001\002\000\010\023\ufff1\026\121" +
    "\061\ufff1\001\002\000\004\065\135\001\002\000\004\022" +
    "\136\001\002\000\010\017\113\020\114\021\117\001\002" +
    "\000\006\023\140\026\121\001\002\000\132\004\046\014" +
    "\010\015\025\016\023\017\013\020\065\021\047\022\067" +
    "\023\070\024\037\025\040\026\041\027\071\030\043\031" +
    "\011\032\064\033\032\034\045\035\022\036\034\037\062" +
    "\040\020\041\012\042\054\043\026\044\042\045\052\046" +
    "\044\047\035\050\024\051\050\052\015\053\027\054\063" +
    "\055\060\056\055\057\031\060\057\061\036\062\016\063" +
    "\056\064\014\065\033\066\051\001\002\000\134\004\046" +
    "\006\142\014\010\015\025\016\023\017\013\020\065\021" +
    "\047\022\067\023\070\024\037\025\040\026\041\027\071" +
    "\030\043\031\011\032\064\033\032\034\045\035\022\036" +
    "\034\037\062\040\020\041\012\042\054\043\026\044\042" +
    "\045\052\046\044\047\035\050\024\051\050\052\015\053" +
    "\027\054\063\055\060\056\055\057\031\060\057\061\036" +
    "\062\016\063\056\064\014\065\033\066\051\001\002\000" +
    "\136\004\ufffa\005\ufffa\007\ufffa\014\ufffa\015\ufffa\016\ufffa" +
    "\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025" +
    "\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa" +
    "\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042" +
    "\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa" +
    "\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057" +
    "\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa" +
    "\066\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\006\003\004\016\003\001\001\000\004\005" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\027\010\020\017\016\020\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\075\012\101\013\100\014\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\104\014\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\106\001\001\000\002\001\001\000\004" +
    "\014\110\001\001\000\002\001\001\000\006\004\115\015" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\124\020\065\001\001\000\004\020" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\115\015\130\001\001\000\002\001\001\000\006\004" +
    "\115\015\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\115\015\136\001\001\000" +
    "\002\001\001\000\006\017\140\020\065\001\001\000\004" +
    "\020\126\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$preparser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$preparser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$preparser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$preparser$actions {


    TipoES es;
    Bloque bloque;
    boolean error = false;

  private final preparser parser;

  /** Constructor */
  CUP$preparser$actions(preparser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$preparser$do_action(
    int                        CUP$preparser$act_num,
    java_cup.runtime.lr_parser CUP$preparser$parser,
    java.util.Stack            CUP$preparser$stack,
    int                        CUP$preparser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$preparser$result;

      /* select the action based on the action number */
      switch (CUP$preparser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipo ::= DECLBOOL 
            {
              TipoB RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		 RESULT = TipoB.BOOLEANO; 
              CUP$preparser$result = new java_cup.runtime.Symbol(2/*tipo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo ::= DECLREAL 
            {
              TipoB RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		 RESULT = TipoB.REAL; 
              CUP$preparser$result = new java_cup.runtime.Symbol(2/*tipo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo ::= DECLENTERO 
            {
              TipoB RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		 RESULT = TipoB.ENTERO; 
              CUP$preparser$result = new java_cup.runtime.Symbol(2/*tipo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // todo ::= MOD 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // todo ::= DIV 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // todo ::= IDENT 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // todo ::= PYCOMA 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // todo ::= REDONDEO 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // todo ::= TECHO 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // todo ::= PISO 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // todo ::= LEER 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // todo ::= ESCRIBIR 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // todo ::= FINHACER 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // todo ::= HACER 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // todo ::= FINSI 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // todo ::= SINO 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // todo ::= SI 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // todo ::= DECLBOOL 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // todo ::= DECLREAL 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // todo ::= DECLENTERO 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // todo ::= FIN 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // todo ::= COMIENZO 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // todo ::= ID 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // todo ::= FALSO 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // todo ::= CIERTO 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // todo ::= REAL 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // todo ::= ENTERO 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // todo ::= ASIGNACION 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // todo ::= MENORIGUAL 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // todo ::= MAYORIGUAL 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // todo ::= MENOR 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // todo ::= MAYOR 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // todo ::= DIF 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // todo ::= IGUAL 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // todo ::= NOLOG 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // todo ::= OLOG 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // todo ::= YLOG 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // todo ::= ENTRE 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // todo ::= POR 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // todo ::= MENOS 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // todo ::= MAS 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // todo ::= COMA 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // todo ::= CCORCH 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // todo ::= ACORCH 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // todo ::= CPARENT 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // todo ::= APARENT 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // todo ::= DOSPUNTOS 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(14/*todo*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // loquesea ::= todo 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(13/*loquesea*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // loquesea ::= loquesea todo 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(13/*loquesea*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LVar ::= tipo ID 
            {
              List RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		TipoB t = (TipoB)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		 	
                            List l = new LinkedList();
                            l.add(new TBasico(t));
                            RESULT = l; 
                    
              CUP$preparser$result = new java_cup.runtime.Symbol(11/*LVar*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LVar ::= LVar COMA tipo ID 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		TipoB t = (TipoB)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
			
                            l.add(new TBasico(t));
                            RESULT = l;
                    
              CUP$preparser$result = new java_cup.runtime.Symbol(11/*LVar*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ParamS ::= SALIDA DOSPUNTOS LVar 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		 
                    List<TParam> lp = new LinkedList<TParam>();
                    for(int i=0; i< l.size(); i++){
                        lp.add(new TParam((Tipo)l.get(i),TipoES.OUT));
                    }
                    RESULT = lp; 
                
              CUP$preparser$result = new java_cup.runtime.Symbol(10/*ParamS*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ParamES ::= ENTSAL DOSPUNTOS LVar 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		 
                    List<TParam> lp = new LinkedList<TParam>();
                    for(int i=0; i< l.size(); i++){
                        lp.add(new TParam((Tipo)l.get(i),TipoES.IN_OUT));
                    }
                    RESULT = lp; 
                
              CUP$preparser$result = new java_cup.runtime.Symbol(9/*ParamES*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ParamE ::= ENTRADA DOSPUNTOS LVar 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		 
                    List<TParam> lp = new LinkedList<TParam>();
                    for(int i=0; i< l.size(); i++){
                        lp.add(new TParam((Tipo)l.get(i),TipoES.IN));
                    }
                    RESULT = lp; 
                
              CUP$preparser$result = new java_cup.runtime.Symbol(8/*ParamE*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Param ::= ParamS 
            {
              List RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		List p = (List)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		 RESULT = p; 
              CUP$preparser$result = new java_cup.runtime.Symbol(7/*Param*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Param ::= ParamES 
            {
              List RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		List p = (List)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		 RESULT = p; 
              CUP$preparser$result = new java_cup.runtime.Symbol(7/*Param*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Param ::= ParamE 
            {
              List RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		List p = (List)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		 RESULT = p; 
              CUP$preparser$result = new java_cup.runtime.Symbol(7/*Param*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Param ::= ParamE PYCOMA ParamES 
            {
              List RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		List p1 = (List)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		List p2 = (List)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		
                        p1.addAll(p2);
                        RESULT = p1; 
                    
              CUP$preparser$result = new java_cup.runtime.Symbol(7/*Param*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Param ::= ParamES PYCOMA ParamS 
            {
              List RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		List p1 = (List)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		List p2 = (List)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		
                        p1.addAll(p2);
                        RESULT = p1; 
                    
              CUP$preparser$result = new java_cup.runtime.Symbol(7/*Param*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Param ::= ParamE PYCOMA ParamS 
            {
              List RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		List p1 = (List)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		List p2 = (List)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		
                        p1.addAll(p2);
                        RESULT = p1; 
                    
              CUP$preparser$result = new java_cup.runtime.Symbol(7/*Param*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Param ::= ParamE PYCOMA ParamES PYCOMA ParamS 
            {
              List RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-4)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-4)).right;
		List p1 = (List)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-4)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).right;
		List p2 = (List)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right;
		List p3 = (List)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-0)).value;
		
                        p1.addAll(p2);
                        p1.addAll(p3);
                        RESULT = p1; 
                    
              CUP$preparser$result = new java_cup.runtime.Symbol(7/*Param*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Func ::= FUNC tipo ID APARENT LVar CPARENT loquesea FINFUNC 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-5)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).right;
		List v = (List)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-3)).value;
			
                    //if( bloque.getTS().isDefined(i.text)){
                        bloque.getTS().get(i.text).setStatus(1);
                    //}else{
                        InfoSub is = new InfoSub(null, v);
                        Informacion info = new Informacion(i.text, TipoF.PROC, is, 0);
                        bloque.getTS().add(i.text, info);
                    //}
                
              CUP$preparser$result = new java_cup.runtime.Symbol(6/*Func*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-7)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Proc ::= PROC ID APARENT Param CPARENT loquesea FINPROC 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-5)).right;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-3)).right;
		List p = (List)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-3)).value;
			
                        
                    //if( bloque.getTS().isDefined(i.text)){
                    //    bloque.getTS().get(i.text).setStatus(1);
                    //}else{
                        InfoSub is = new InfoSub(null, p);
                        Informacion info = new Informacion(i.text, TipoF.PROC, is, 0);
                        bloque.getTS().add(i.text, info);
                    //}
                        
                
              CUP$preparser$result = new java_cup.runtime.Symbol(5/*Proc*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-6)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SubProgs ::= 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(3/*SubProgs*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SubProgs ::= SubProgs Func 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(3/*SubProgs*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SubProgs ::= SubProgs Proc 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(3/*SubProgs*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicializar ::= 
            {
              Object RESULT = null;
		 Misc.acumulador = new Bloque(); bloque = Misc.acumulador; 
              CUP$preparser$result = new java_cup.runtime.Symbol(12/*inicializar*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$preparser$stack.elementAt(CUP$preparser$top-1)).value;
		RESULT = start_val;
              CUP$preparser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$preparser$parser.done_parsing();
          return CUP$preparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= inicializar SubProgs loquesea 
            {
              Object RESULT = null;

              CUP$preparser$result = new java_cup.runtime.Symbol(1/*inicio*/, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$preparser$stack.elementAt(CUP$preparser$top-0)).right, RESULT);
            }
          return CUP$preparser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

