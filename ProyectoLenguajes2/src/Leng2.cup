import java_cup.runtime.*;
import java.lang.*;
import java.util.*;

/**
 * Universidad Simon Bolivar
 * Lenguajes de Programacion II
 * Entrega final 7/04/2008
 * 
 * Maria Sol Ferrer 04-36975
 * Jamil Navarro 04-37334
 *
 * Proyecto: Procesador de lenguaje imperativo.
 * Leng2.cup: Analizador sintactico del lenguaje
 * 
 */
action code {:
    Bloque bloque = (Misc.acumulador != null)? Misc.acumulador : new Bloque();	
    boolean noError = true;
:}

/**
 * Definicion de los tokens generados por el escaner
 * con el tipo asociado.
 */  
 
 
 
 
terminal TokenValue FUNC;
terminal TokenValue FINFUNC;
terminal TokenValue PROC;
terminal TokenValue FINPROC;
terminal TokenValue ENTRADA;
terminal TokenValue ENTSAL;
terminal TokenValue SALIDA;
terminal TokenValue DOSPUNTOS;
terminal TokenValue COMIENZO;
terminal TokenValue FIN;
terminal TokenValue DECLENTERO;
terminal TokenValue DECLREAL;
terminal TokenValue DECLBOOL;
terminal TokenValue TIPODATO;
terminal TokenValue FINTIPODATO;
terminal TokenValue FINT;
terminal TokenValue CASO;
terminal TokenValue ES;
terminal TokenValue APARENT;
terminal TokenValue CPARENT;
terminal TokenValue ACORCH;
terminal TokenValue CCORCH;  
terminal TokenValue COMA;  
terminal TokenValue PUNTO;  
terminal OperadorB MAS;
terminal OperadorB MENOS;
terminal OperadorB POR;
terminal OperadorB ENTRE;
terminal OperadorB DIV;
terminal OperadorB MOD; 
terminal OperadorU TECHO;
terminal OperadorU PISO;
terminal OperadorU REDONDEO;
terminal OperadorB YLOG;
terminal OperadorB OLOG;
terminal OperadorU NOLOG;
terminal OperadorB IGUAL;
terminal OperadorB DIF;
terminal OperadorB MAYOR;
terminal OperadorB MENOR;
terminal OperadorB MAYORIGUAL;
terminal OperadorB MENORIGUAL;
terminal TokenValue ASIGNACION; 
terminal TokenValue SI;
terminal TokenValue SINO;
terminal TokenValue FINSI;
terminal TokenValue HACER;
terminal TokenValue FINHACER;
terminal TokenValue PYCOMA;
terminal TokenValue CIERTO;
terminal TokenValue FALSO;
		
terminal Integer ENTERO;
terminal TokenValue ID;
terminal Float REAL;

/**
 * Definicion de los simbolos no terminales de la
 * gramatica con el tipo de su atributo asociado.
 */
non terminal inicio;
non terminal Bloque bloq;
non terminal Bloque lInst;
non terminal Inst inst, Decl, SubProg, iDeclA, iAsig, iSi, iSino, 
				iHacer, llamProc;
non terminal Expresion expr, fact;
non terminal Bloque inicB, finB;
non terminal Tipo tipo, tipoG, tipoArr, tipoReg, tipoVan;
non terminal TipoF tipoB;
non terminal LinkedList arreglo, Lelem, LParam;
non terminal Proc;
non terminal Func;
non terminal Param;
non terminal ParamE;
non terminal ParamES;
non terminal ParamS;
non terminal TablaSim LVar;
non terminal iniBProc;
non terminal LCorchN;
non terminal LCorch;
non terminal TokenValue Var;
non terminal LValue LVal;
non terminal discr;
non terminal lSubProgs;
non terminal HashMap lDiscr;
non terminal TablaSim LC;

/**
  * Orden de Precedencia
  * Los operadores mas abajo tienen mayor precedencia
  */
precedence left IGUAL, DIF;
precedence left OLOG;
precedence left YLOG;
precedence left MAYOR, MENOR, MAYORIGUAL, MENORIGUAL;
precedence left MAS, MENOS;
precedence left POR, ENTRE, DIV, MOD;
precedence left PUNTO;

/**
 * Gramatica del lenguaje.
 */
inicio	::= lSubProgs COMIENZO bloq:b FIN
        {: 	//if (noError)
				b.imprimirB(0);
			
		:}
		;
lSubProgs::= lSubProgs SubProg
            |	SubProg
            |
            ;
/** Definicion de un Bloque */
bloq    ::= inicB lInst finB:b {: RESULT = b; :}
        ;
/** Inicio de un Bloque */
inicB   ::= {: bloque = new Bloque(bloque, true); :}
        ;
/** Fin de un Bloque */
finB    ::= {: Bloque b = bloque; bloque = bloque.getParent(); RESULT = b; :}
        ;
/** Lista de Instrucciones */
lInst	::= lInst inst:i 	{: bloque.agregarInst(i); :}
        |   inst:i 		    {: bloque.agregarInst(i); :}
        ;
/** Tipos de Instrucciones */		
inst	::= Decl:i	PYCOMA  {: RESULT = i; :}
        |   iDeclA:i	PYCOMA  {: RESULT = i; :}
        |   iAsig:i     PYCOMA  {: RESULT = i; :}
        |   iSi:i               {: RESULT = i; :}
        |   iSino:i             {: RESULT = i; :}
        |   iHacer:i            {: RESULT = i; :}
        |   llamProc:i	PYCOMA  {: RESULT = i; :}		
        ;
/** Declaracion */
Decl	::= tipo:t ID:i
		{:  Decl inst = new Decl(t, i.text );	
			Informacion info = new Informacion(i.text,t,null, 0);
			/*if (t.equals(TipoF.INT)) 
				info.setValor(0);
			else if (t.equals(TipoF.FLOAT)) 
				info.setValor(0.0);
			else if (t.equals(TipoF.BOOL)) 
				info.setValor(new Booleano(false));*/
			noError = noError && inst.esCorrecta(bloque,info, i.lineBegin+1);			
			if (bloque.getTS().getLocally(i.text) == null) 
				bloque.getTS().add(i.text ,info);
                    RESULT = null;
        :}				
//            |	TIPODATO ID IGUAL iniBProc LVar finB:b
//            {:	RESULT = null;
//            :}
//            |	TIPODATO ID IGUAL iniBProc LVar COMA discr finB:b
//            {:	RESULT = null;
//            :}
        ;

/** Declaracion con Asignacion*/
iDeclA	::= tipo:t ID:i ASIGNACION:a expr:e
		{:  Decl inst = new Decl(t, i.text );	
			Informacion info = new Informacion(i.text,t,e,0);
			noError = noError && inst.esCorrecta(bloque, info, a.lineBegin+1);
			if (bloque.getTS().get(i.text) == null){
                            bloque.getTS().add(i.text,info);
                        }
			InstAsig insta = new InstAsig(new Identificador(i.text), e); 					
			noError = noError && insta.esCorrecta(bloque, info, a.lineBegin+1);				
			RESULT = insta;     
			//chequear que el LValue exista
        :}
        ;
/** Instruccion de Asignacion */
iAsig	::= LVal:d ASIGNACION:a expr:e
        {: 	InstAsig i = new InstAsig(d , e); 
			Informacion info = new Informacion(d.obtenerId(),TipoF.INT,e,0);			
			noError = noError && i.esCorrecta(bloque, info, a.lineBegin+1);
			RESULT = i; 
			//chequear que el LValue exista
        :}
        ;
/** Instruccion Condicional */		
iSi	::= SI APARENT expr:e CPARENT bloq:l FINSI
		{: RESULT = new InstIf(e, l ); :}
        ;
/** Instruccion Condicional con flujo alterno */		
iSino 	::= SI APARENT expr:e CPARENT bloq:l1 SINO bloq:l2 FINSI
		{: RESULT = new InstIfElse(e, l1,l2); :}
        ;
/** Instruccion de Iteracion */		
iHacer	::= HACER APARENT expr:e CPARENT bloq:l FINHACER
		{: RESULT = new InstDo(e, l); :}
        ;
/** Instruccion de llamada a un procedimiento */		
llamProc::=	ID:i APARENT LParam:l CPARENT
		{:	if (!bloque.getTS().isDefined(i.text)) {
				noError = noError & false;
				System.out.println("ERROR (linea "+(i.lineBegin+1)+
					") El subprograma '"+i.text+"' no ha sido definido.");
			} else				
				RESULT = new InstProc(i.text, l);
			
		:}
		;
/** Definicion de subprograma */		
SubProg	::=	Proc	{: RESULT = null; :}
		|	Func	{: RESULT = null; :}
		;
/** Definicion de Procedimiento */				
Proc	::= PROC ID:i iniBProc APARENT Param CPARENT lInst:l finB:b FINPROC
			{:	if (bloque.getTS().get(i.text) != null) {
					Informacion info = bloque.getTS().get(i.text);
					InfoSub is = (InfoSub)info.valor;				
					is.setBloque(b);
					info.setValor(is);
					bloque.getTS().add(i.text, info);
				}
			:}
		;
/** Definicion de Funcion */					
Func	::= FUNC tipo ID:i iniBProc APARENT LVar CPARENT lInst:l finB:b FINFUNC
			{:	if (bloque.getTS().get(i.text) != null) {
					Informacion info = bloque.getTS().get(i.text);
					InfoSub is = (InfoSub)info.valor;				
					is.setBloque(b);
					info.setValor(is);				
					bloque.getTS().add(i.text, info);
				}
			:}
		;
/** Creacion del bloque de un subprograma */	
iniBProc::=	{: 	bloque = new Bloque(bloque, false); :}
		;
/** Parametros de un procedimiento */		
Param	::=	ParamE PYCOMA ParamES PYCOMA ParamS
		|	ParamE:p1 PYCOMA ParamS
		|	ParamES:p1 PYCOMA ParamS
		|	ParamE:p1 PYCOMA ParamES
		|	ParamE
		|	ParamES
		|	ParamS
		;
/** Parametros de entrada de un procedimiento */
ParamE	::=	ENTRADA DOSPUNTOS LVar //Se supone que preparser ya proceso esto
		;
/** Parametros de entrada/salida de un procedimiento */		
ParamES	::=	ENTSAL DOSPUNTOS LVar  //Se supone que preparser ya proceso esto
		;
/** Parametros de salida de un procedimiento */		
ParamS	::=	SALIDA DOSPUNTOS LVar  //Se supone que preparser ya proceso esto
		;
/** Lista de parametros (tipo, identificador) */	//TS
LVar	::=	LVar :ts COMA tipo:t ID:i
                    {:	Informacion info = new Informacion(i.text, t, null, 0);
                        ts.add(i.text, info);
                        RESULT = ts;
			//bloque.getTS().add(i.text, info);
                        
                    :}
            |	tipo:t ID:i
                    {: 	
                        Informacion info = new Informacion(i.text, t, null, 0);
                        TablaSim ts = new TablaSim(null);
                        ts.add(i.text, info);
                        RESULT = ts;    
                            //bloque.getTS().add(i.text, info);
                    :}
            ;

/** Definicion de Expresion */	
expr	::= expr:e1 IGUAL expr:e2
		{:  RESULT = new ExprBin(e1, OperadorB.IGUAL, e2); :}
        |   expr:e1 DIF expr:e2
		{:  RESULT = new ExprBin(e1, OperadorB.DESIGUAL, e2); :}
        |   expr:e1 OLOG expr:e2
		{:  RESULT = new ExprBin(e1, OperadorB.OR, e2); :}
        |   expr:e1 YLOG expr:e2
		{:  RESULT = new ExprBin(e1, OperadorB.AND, e2); :}
        |   expr:e1 MAYOR expr:e2
		{:  RESULT = new ExprBin(e1, OperadorB.MAYOR ,e2); :}
        |   expr:e1 MENOR expr:e2
		{:  RESULT = new ExprBin(e1, OperadorB.MENOR ,e2); :}
        |   expr:e1 MAYORIGUAL expr:e2
		{:  RESULT = new ExprBin(e1, OperadorB.MAYORIGUAL ,e2); :}
        |   expr:e1 MENORIGUAL expr:e2
		{:  RESULT = new ExprBin(e1, OperadorB.MENORIGUAL ,e2); :}
        |   expr:e1 MAS expr:e2
		{:  RESULT = new ExprBin(e1, OperadorB.SUMA ,e2); :}
        |   expr:e1 MENOS expr:e2
		{:  RESULT = new ExprBin(e1, OperadorB.RESTA ,e2); :}
        |   expr:e1 ENTRE expr:e2
		{:  RESULT = new ExprBin(e1, OperadorB.DIVR ,e2); :}
        |   expr:e1 POR expr:e2
		{:  RESULT = new ExprBin(e1, OperadorB.MULT ,e2); :}
        |   expr:e1 DIV expr:e2
		{:  RESULT = new ExprBin(e1, OperadorB.DIVE ,e2); :}
        |   expr:e1 MOD expr:e2
		{:  RESULT = new ExprBin(e1, OperadorB.MOD ,e2); :}
        |   fact:f
		{:	RESULT = f; :}		
        |   expr:e PUNTO expr   //Crear algo que represente miembro interno
		{:	RESULT = e; :}
        ;
/** Definicion de Factor */		
fact	::= APARENT expr:e CPARENT 
		{:  RESULT = e; :}
        |   ENTERO:n 
		{:  RESULT = new Factor (TipoF.INT, n); :}
        |   MENOS fact:f 
		{:  RESULT = new ExprUna (OperadorU.MENOS, f); :}
        |   REAL:n 
		{:  RESULT = new Factor (TipoF.FLOAT, n); :}
        |   TECHO APARENT fact:f CPARENT
		{:  RESULT = new ExprUna (OperadorU.TECHO, f); :}
        |   PISO APARENT fact:f CPARENT
		{:  RESULT = new ExprUna (OperadorU.PISO, f); :}
        |   REDONDEO APARENT fact:f CPARENT
		{:  RESULT = new ExprUna (OperadorU.REDONDEO, f); :}
        |   NOLOG fact:f
		{:  RESULT = new ExprUna (OperadorU.NOT, f); :}
        |   LVal:i
		{:  Factor e = new Factor (TipoF.LVAL, i); 	//cambiar
			noError = noError && e.esCorrecta(bloque, 0); 	//pasar numero de linea
			RESULT = e;
		:}
		|	ID:i APARENT LParam CPARENT	
        |   CIERTO:c 
		{: RESULT= new Factor(TipoF.BOOL, new Booleano(true)); :}
        |   FALSO:c 
		{: RESULT= new Factor(TipoF.BOOL, new Booleano(false)); :}		
        |   arreglo:l
		{: RESULT = new Arreglo(TipoF.ARRAY, 0, l); :}
        ;

LVal	::=	LVal:l ACORCH expr:e CCORCH 	// expr debe ser de tipo INT
		{:	RESULT = new ElemArreglo(l, e); :}
		|	LVal:l PUNTO ID:i				// ID debe ser campo del record
		{:	RESULT = new CampoRegistro(l, i.text); :}
		|	ID:i
		{: RESULT = new Identificador(i.text); :}
		;
		
/** Lista de parametros que se pasan al llamar a un subprograma */
LParam	::=	LParam:l COMA expr:e
		{:  l.add(e);
			RESULT = l;
		:}
		|	expr:e
		{:  LinkedList<Expresion> l = new LinkedList<Expresion>();
			l.add(e);
			RESULT = l;
		:}
		;
/** Tipos de Datos */
//tipoG	::=	tipo:t			{: RESULT = t; :}
//		|	LCorchN tipo	{: RESULT = TipoF.ARRAY; :}
//		|	LCorch tipo		{: RESULT = TipoF.ARRAY; :}
//		;

/** Tipos de Datos */		
tipo    ::= tipoB:t     
			{: RESULT = new TBasico(t); :}
        |   ACORCH ENTERO:i CCORCH tipo:t   
			{: RESULT = new TArreglo(t,i); :}	//tamanio del arreglo?
        |   ACORCH CCORCH tipo:t   
			{: RESULT = new TArreglo(t,-1); :}
        |   TIPODATO LC:ts FINTIPODATO   
			{: RESULT = new TRegistro(ts); :}
        ;

/* Tipos Basicos */
tipoB   ::= DECLENTERO:t    {: RESULT = TipoF.INT; :}
        |   DECLREAL:t      {: RESULT = TipoF.FLOAT;  :}
        |   DECLBOOL:t      {: RESULT = TipoF.BOOL; :} 
        ;

LC		::=	tipo:t ID:i				
		{: 	TablaSim ts = new TablaSim();
			Informacion info = new Informacion(i.text, t, null,0);	
			ts.add(i.text,info);
			RESULT = ts; 
		:}
		|	LC:ts COMA tipo:t ID:i	
		{: 	Informacion info = new Informacion(i.text, t, null,0);		
			ts.add(i.text,info);
			RESULT = ts; 
		:}
        ;

/* Variante */
tipoVan ::= TIPODATO LVar:ts COMA CASO tipo:t ID:i ES lDiscr:hm FINT //Lvar ts comun
			{: 
				Informacion info = new Informacion(i.text, t, null, 0);
				ts.add(i.text,info);
				RESULT = new TVariante(ts,i.text, (HashMap<Object,TablaSim>)hm); 
			:}
        ;

/** Definicion de un caso del discriminante */
lDiscr	::= lDiscr:hm fact:f APARENT LVar:ts CPARENT    //LVar tabla de sim caso
                {: 
                    if(!hm.containsKey(f)){
                        hm.put(f,ts);
                    }
                    RESULT = hm;
                :}
        |   fact:f APARENT LVar:ts CPARENT  //LVar tabla de simbolos caso
                {:
                    HashMap<Object,TablaSim> hm = new HashMap<Object,TablaSim>();
                    hm.put(f,ts);
                    RESULT = hm;
                :}
        ;

/** Contenido de un arreglo */	
arreglo	::= ACORCH Lelem:l CCORCH		{: RESULT = l; :}
		;

/** Lista de elementos */			
Lelem	::= Lelem:L COMA fact:f
                {:	L.add(f);
                        RESULT = L;
                :}
            |	fact:f
                {: 	LinkedList<Expresion> L = new LinkedList<Expresion>();
                        L.add(f);
                        RESULT = L;
                :}
                ;

